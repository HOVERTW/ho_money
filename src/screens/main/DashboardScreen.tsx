import React, { useState, useEffect, useMemo, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  RefreshControl,
  Dimensions,
  Modal,
  TextInput,
  Alert,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { Ionicons } from '@expo/vector-icons';
// import { LineChart } from 'react-native-chart-kit'; // ÁßªÈô§‰∏çÂÖºÂÆπÁöÑÂúñË°®Â∫´
import { Platform } from 'react-native';
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { transactionDataService, Transaction } from '../../services/transactionDataService';
import { assetTransactionSyncService, AssetData } from '../../services/assetTransactionSyncService';
import { liabilityService, LiabilityData } from '../../services/liabilityService';
// import { currentMonthCalculationService } from '../../services/currentMonthCalculationService'; // Â∑≤ÁßªÈô§
import { eventEmitter, EVENTS } from '../../services/eventEmitter';
import { recurringTransactionService } from '../../services/recurringTransactionService';
import { FinancialCalculator } from '../../utils/financialCalculator';
import { ReliableDeleteService } from '../../services/reliableDeleteService';
import { runSyncValidationTests } from '../../utils/testSyncValidation';
import { userProfileService, UserProfile } from '../../services/userProfileService';
import ErrorBoundary from '../../components/ErrorBoundary';
import { clearAllStorage } from '../../utils/storageManager';
import { useAuthStore } from '../../store/authStore';
import { userDataSyncService } from '../../services/userDataSyncService';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { supabase } from '../../services/supabase';
import { unifiedDataManager } from '../../services/unifiedDataManager';
import { DiagnosticButton } from '../../components/DiagnosticButton';
import SyncStatusIndicator from '../../components/SyncStatusIndicator';
import { assetDisplayFixService } from '../../services/assetDisplayFixService';
// import { SupabaseTableChecker } from '../../utils/supabaseTableChecker';

const { width: screenWidth } = Dimensions.get('window');

export default function DashboardScreen() {
  const insets = useSafeAreaInsets();
  const [refreshing, setRefreshing] = useState(false);
  const [isInitialized, setIsInitialized] = useState(false); // Èò≤Ê≠¢ÈáçË§áÂàùÂßãÂåñ
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [assets, setAssets] = useState<AssetData[]>([]);
  const [liabilities, setLiabilities] = useState<LiabilityData[]>([]);
  const [timeRange, setTimeRange] = useState<'today' | 'week' | 'month' | 'total'>('month');
  const [forceRefresh, setForceRefresh] = useState(0); // Âº∑Âà∂Âà∑Êñ∞Ë®àÊï∏Âô®

  // Áî®Êà∂ÂêçÁ®±Á∑®ËºØÁõ∏ÈóúÁãÄÊÖã
  const [showEditNameModal, setShowEditNameModal] = useState(false);
  const [editingName, setEditingName] = useState('');
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);

  // ÁôªÈåÑÁõ∏ÈóúÁãÄÊÖã
  const [showLoginModal, setShowLoginModal] = useState(false);
  const [loginEmail, setLoginEmail] = useState('');
  const [loginPassword, setLoginPassword] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const [confirmPassword, setConfirmPassword] = useState('');

  // Âæû auth store Áç≤ÂèñË™çË≠âÁãÄÊÖãÂíåÊñπÊ≥ï
  const {
    user,
    loading: authLoading,
    error: authError,
    signIn,
    signUp,
    signInWithGoogle,
    signOut,
    clearError
  } = useAuthStore();

  // Èò≤Ê≠¢ÈáçË§áÂàùÂßãÂåñÁöÑ ref
  const initializationRef = useRef(false);

  // ÂàùÂßãÂåñÁî®Êà∂Ë≥áÊñôÊúçÂãôÂíåË≥áÁî¢ÂêåÊ≠•ÔºàÂè™Âü∑Ë°å‰∏ÄÊ¨°Ôºâ
  useEffect(() => {
    if (initializationRef.current) return;
    initializationRef.current = true;

    const initUserProfile = async () => {
      try {
        console.log('üöÄ ÈñãÂßãÂàùÂßãÂåñ DashboardScreen...');
        await userProfileService.initialize();
        setUserProfile(userProfileService.getProfile());
        setIsInitialized(true);
        console.log('‚úÖ DashboardScreen ÂàùÂßãÂåñÂÆåÊàê');
      } catch (error) {
        console.error('‚ùå Áî®Êà∂Ë≥áÊñôÂàùÂßãÂåñÂ§±Êïó:', error);
        setIsInitialized(true); // Âç≥‰ΩøÂ§±Êïó‰πüÊ®ôË®òÁÇ∫Â∑≤ÂàùÂßãÂåñÔºåÈÅøÂÖçÈáçË§áÂòóË©¶
      }
    };
    initUserProfile();
  }, []);

  // Áõ£ËÅΩÁî®Êà∂ÁôªÈåÑÁãÄÊÖãËÆäÂåñÔºåËá™ÂãïËß∏ÁôºÊï∏ÊìöÂêåÊ≠•ÔºàÈò≤Ê≠¢ÈáçË§áÂü∑Ë°åÔºâ
  const syncTriggeredRef = useRef(false);
  useEffect(() => {
    if (user && isInitialized && !syncTriggeredRef.current) {
      syncTriggeredRef.current = true;
      console.log('üë§ Ê™¢Ê∏¨Âà∞Áî®Êà∂ÁôªÈåÑÔºåËá™ÂãïËß∏ÁôºÊï∏ÊìöÂêåÊ≠•...');
      // Âª∂ÈÅ≤Âü∑Ë°åÔºåÁ¢∫‰øùÁôªÈåÑÊµÅÁ®ãÂÆåÊàê
      setTimeout(() => {
        handleSyncToSupabase();
        // ÈáçÁΩÆÊ®ôË®òÔºåÂÖÅË®±‰∏ãÊ¨°ÁôªÈåÑÊôÇÂÜçÊ¨°ÂêåÊ≠•
        setTimeout(() => {
          syncTriggeredRef.current = false;
        }, 5000);
      }, 2000);
    }
  }, [user, isInitialized]);

  // Áõ£ËÅΩÊâÄÊúâË≥áÊñôËÆäÂåñÔºàÂè™Âú®ÂàùÂßãÂåñÂÆåÊàêÂæåÂü∑Ë°åÔºâ
  const listenersSetupRef = useRef(false);
  useEffect(() => {
    if (!isInitialized || listenersSetupRef.current) return;
    listenersSetupRef.current = true;

    try {
      console.log('üîß Ë®≠ÁΩÆÊï∏ÊìöÁõ£ËÅΩÂô®...');

      // ÂàùÂßãÂåñË≥áÊñô
      setTransactions(transactionDataService.getTransactions());
      setAssets(assetTransactionSyncService.getAssets());
      setLiabilities(liabilityService.getLiabilities());

      // Ê∑ªÂä†Áõ£ËÅΩÂô®Ôºà‰ΩøÁî®Èò≤ÊäñÊ©üÂà∂Ôºâ
      let updateTimeout: NodeJS.Timeout | null = null;

      const debouncedUpdate = () => {
        if (updateTimeout) clearTimeout(updateTimeout);
        updateTimeout = setTimeout(() => {
          setTransactions(transactionDataService.getTransactions());
          setAssets(assetTransactionSyncService.getAssets());
          setLiabilities(liabilityService.getLiabilities());
        }, 100); // 100ms Èò≤Êäñ
      };

      const handleTransactionsUpdate = () => debouncedUpdate();
      const handleAssetsUpdate = (updatedAssets: AssetData[]) => {
        setAssets(updatedAssets);
      };
      const handleLiabilitiesUpdate = (updatedLiabilities: LiabilityData[]) => {
        setLiabilities(updatedLiabilities);
      };

      transactionDataService.addListener(handleTransactionsUpdate);
      assetTransactionSyncService.addListener(handleAssetsUpdate);
      liabilityService.addListener(handleLiabilitiesUpdate);

      // Ê∑ªÂä†Ë≤°ÂãôÊï∏ÊìöÊõ¥Êñ∞‰∫ã‰ª∂Áõ£ËÅΩÂô®Ôºà‰ΩøÁî®Èò≤ÊäñÔºâ
      const handleFinancialDataUpdate = (data: any) => {
        console.log('üì° DashboardScreen Êî∂Âà∞Ë≤°ÂãôÊï∏ÊìöÊõ¥Êñ∞‰∫ã‰ª∂');
        debouncedUpdate();
      };

      eventEmitter.on(EVENTS.FINANCIAL_DATA_UPDATED, handleFinancialDataUpdate);
      eventEmitter.on(EVENTS.LIABILITY_ADDED, handleFinancialDataUpdate);
      eventEmitter.on(EVENTS.LIABILITY_DELETED, handleFinancialDataUpdate);
      eventEmitter.on(EVENTS.FORCE_REFRESH_ALL, handleFinancialDataUpdate);
      eventEmitter.on(EVENTS.FORCE_REFRESH_DASHBOARD, handleFinancialDataUpdate);

      console.log('‚úÖ Êï∏ÊìöÁõ£ËÅΩÂô®Ë®≠ÁΩÆÂÆåÊàê');

      // Ê∏ÖÁêÜÂáΩÊï∏
      return () => {
        if (updateTimeout) clearTimeout(updateTimeout);
        transactionDataService.removeListener(handleTransactionsUpdate);
        assetTransactionSyncService.removeListener(handleAssetsUpdate);
        liabilityService.removeListener(handleLiabilitiesUpdate);
        eventEmitter.off(EVENTS.FINANCIAL_DATA_UPDATED, handleFinancialDataUpdate);
        eventEmitter.off(EVENTS.LIABILITY_ADDED, handleFinancialDataUpdate);
        eventEmitter.off(EVENTS.LIABILITY_DELETED, handleFinancialDataUpdate);
        eventEmitter.off(EVENTS.FORCE_REFRESH_ALL, handleFinancialDataUpdate);
        eventEmitter.off(EVENTS.FORCE_REFRESH_DASHBOARD, handleFinancialDataUpdate);
        listenersSetupRef.current = false;
      };
    } catch (error) {
      console.error('‚ùå DashboardScreen Áõ£ËÅΩÂô®Ë®≠ÁΩÆÂ§±Êïó:', error);
    }
  }, [isInitialized]);

  // ÁµÑ‰ª∂Âç∏ËºâÊôÇÁöÑÊ∏ÖÁêÜ
  useEffect(() => {
    return () => {
      console.log('üßπ DashboardScreen ÁµÑ‰ª∂Âç∏ËºâÔºåÊ∏ÖÁêÜË≥áÊ∫ê...');
      if (refreshTimeoutRef.current) {
        clearTimeout(refreshTimeoutRef.current);
      }
      // ÈáçÁΩÆÊâÄÊúâ ref
      initializationRef.current = false;
      syncTriggeredRef.current = false;
      listenersSetupRef.current = false;
    };
  }, []);

  // ‰ΩøÁî®Áç®Á´ãË®àÁÆóÂô®
  const calculateSummary = () => {
    try {
      const summary = FinancialCalculator.calculateCurrentMonthSummary();
      return {
        net_worth: summary.netWorth,
        total_assets: summary.totalAssets,
        total_liabilities: summary.totalLiabilities,
        monthly_income: summary.monthlyIncome,
        monthly_expenses: summary.totalExpenses,
        savings_rate: summary.savingsRate,
        monthly_debt_payments: summary.monthlyDebtPayments,
      };
    } catch (error) {
      console.error('‚ùå Ë≤°ÂãôË®àÁÆóÂ§±Êïó:', error);
      return {
        net_worth: 0,
        total_assets: 0,
        total_liabilities: 0,
        monthly_income: 0,
        monthly_expenses: 0,
        savings_rate: 0,
        monthly_debt_payments: 0,
      };
    }
  };

  // ‰ΩøÁî® useMemo Á¢∫‰øùÂú®Êï∏ÊìöËÆäÂåñÊôÇÈáçÊñ∞Ë®àÁÆóÔºå‰ΩÜÈÅøÂÖçÁÑ°ÈôêÂæ™Áí∞
  const mockSummary = useMemo(() => {
    console.log('üîÑ DashboardScreen ÈáçÊñ∞Ë®àÁÆóË≤°ÂãôÊëòË¶Å, Êï∏ÊìöÈï∑Â∫¶:', {
      transactions: transactions?.length || 0,
      assets: assets?.length || 0,
      liabilities: liabilities?.length || 0
    });
    return calculateSummary();
  }, [transactions, assets, liabilities]); // ÁßªÈô§ forceRefresh ‰æùË≥¥

  // Ë®àÁÆóÊåáÂÆöÊôÇÈñìÁØÑÂúçÁöÑÊó•Êúü
  const getDateRange = () => {
    const now = new Date();
    let startDate: Date;

    switch (timeRange) {
      case 'today':
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        break;
      case 'week':
        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
        break;
      case 'month':
        startDate = new Date(now.getFullYear(), now.getMonth(), 1);
        break;
      case 'total':
      default:
        startDate = new Date(0); // ÂæûÊúÄÊó©ÈñãÂßã
        break;
    }

    return { startDate, endDate: now };
  };

  // Ë®àÁÆóÊî∂ÂÖ•ÊîØÂá∫ÂàÜÊûê
  const calculateTopIncomeExpense = () => {
    try {
      if (timeRange === 'month') {
        const incomeExpenseAnalysis = FinancialCalculator.getTopIncomeExpenseAnalysis();
        return {
          topIncomes: incomeExpenseAnalysis.topIncomes,
          topExpenses: incomeExpenseAnalysis.topExpenses,
        };
      } else {
        const topIncomes: Array<{ id: string; name: string; amount: number; type: string }> = [];
        const topExpenses: Array<{ id: string; name: string; amount: number; type: string }> = [];
        const { startDate, endDate } = getDateRange();

        const rangeTransactions = transactionDataService.getTransactionsByDateRange(startDate, endDate);

        // ÊåâÈ°ûÂà•Áµ±Ë®àÊî∂ÂÖ•ÂíåÊîØÂá∫
        const incomeByCategory: { [key: string]: number } = {};
        const expenseByCategory: { [key: string]: number } = {};

        rangeTransactions.forEach(transaction => {
          if (transaction.type === 'income') {
            incomeByCategory[transaction.category] = (incomeByCategory[transaction.category] || 0) + transaction.amount;
          } else if (transaction.type === 'expense') {
            expenseByCategory[transaction.category] = (expenseByCategory[transaction.category] || 0) + transaction.amount;
          }
        });

        // Ê∑ªÂä†Êî∂ÂÖ•È°ûÂà•Âà∞ÊúÄÂ§ßÊî∂ÂÖ•ÂàóË°®
        Object.entries(incomeByCategory).forEach(([category, amount]) => {
          if (amount > 0) {
            topIncomes.push({
              id: `income_${category}`,
              name: category,
              amount: amount,
              type: 'Ë®òÂ∏≥Êî∂ÂÖ•',
            });
          }
        });

        // Ê∑ªÂä†ÊîØÂá∫È°ûÂà•Âà∞ÊúÄÂ§ßÊîØÂá∫ÂàóË°®
        Object.entries(expenseByCategory).forEach(([category, amount]) => {
          if (amount > 0) {
            topExpenses.push({
              id: `expense_${category}`,
              name: category,
              amount: amount,
              type: 'Ë®òÂ∏≥ÊîØÂá∫',
            });
          }
        });

        // ÊéíÂ∫è‰∏¶ÂèñÂâç5Âêç
        topIncomes.sort((a, b) => b.amount - a.amount);
        topExpenses.sort((a, b) => b.amount - a.amount);

        return {
          topIncomes: topIncomes.slice(0, 5),
          topExpenses: topExpenses.slice(0, 5),
        };
      }
    } catch (error) {
      console.error('‚ùå Êî∂ÊîØÂàÜÊûêË®àÁÆóÂ§±Êïó:', error);
      return {
        topIncomes: [],
        topExpenses: [],
      };
    }
  };

  // Ë®àÁÆóÊ≠£Á¢∫ÁöÑË≥áÁî¢Ê∑®ÂÄºÔºàËÄÉÊÖÆ‰∫§ÊòìÂΩ±ÈüøÔºâ
  const calculateCorrectNetWorth = (safeTransactions: any[], safeAssets: any[], safeLiabilities: any[]) => {
    let adjustedTotalAssets = 0;

    console.log('üîç ÈñãÂßãË®àÁÆóË≥áÁî¢Ê∑®ÂÄº...');
    console.log(`üìä Ë≥áÁî¢Êï∏Èáè: ${safeAssets.length}, ‰∫§ÊòìÊï∏Èáè: ${safeTransactions.length}, Ë≤†ÂÇµÊï∏Èáè: ${safeLiabilities.length}`);

    safeAssets.forEach(asset => {
      let assetValue = asset?.current_value || 0;

      // Ë®àÁÆóË©≤Ë≥áÁî¢Áõ∏ÈóúÁöÑÊâÄÊúâ‰∫§ÊòìÂΩ±Èüø
      const assetTransactions = safeTransactions.filter(t =>
        t.account === asset.name || t.from_account === asset.name || t.to_account === asset.name
      );

      let transactionImpact = 0;
      let incomeTotal = 0;
      let expenseTotal = 0;
      let transferInTotal = 0;
      let transferOutTotal = 0;

      assetTransactions.forEach(t => {
        if (t.account === asset.name) {
          // Áõ¥Êé•‰ΩøÁî®Ë©≤Ë≥áÁî¢ÁöÑ‰∫§Êòì
          if (t.type === 'income') {
            const amount = t.amount || 0;
            transactionImpact += amount;
            incomeTotal += amount;
          } else if (t.type === 'expense') {
            const amount = t.amount || 0;
            transactionImpact -= amount;
            expenseTotal += amount;
          }
        } else if (t.type === 'transfer') {
          // ËΩâÂ∏≥‰∫§Êòì
          if (t.from_account === asset.name) {
            const amount = t.amount || 0;
            transactionImpact -= amount;
            transferOutTotal += amount;
          } else if (t.to_account === asset.name) {
            const amount = t.amount || 0;
            transactionImpact += amount;
            transferInTotal += amount;
          }
        }
      });

      const finalAssetValue = assetValue + transactionImpact;
      adjustedTotalAssets += finalAssetValue;

      console.log(`üí∞ Ë≥áÁî¢ "${asset.name}": ÂàùÂßãÂÄº ${assetValue}, Êî∂ÂÖ• +${incomeTotal}, ÊîØÂá∫ -${expenseTotal}, ËΩâÂÖ• +${transferInTotal}, ËΩâÂá∫ -${transferOutTotal}, ‰∫§ÊòìÂΩ±Èüø ${transactionImpact}, ÊúÄÁµÇÂÄº ${finalAssetValue}`);
    });

    const totalLiabilities = safeLiabilities.reduce((sum, liability) => sum + (liability?.balance || 0), 0);
    const netWorth = adjustedTotalAssets - totalLiabilities;

    console.log(`üìä Ë®àÁÆóÁµêÊûú: Á∏ΩË≥áÁî¢ ${adjustedTotalAssets}, Á∏ΩË≤†ÂÇµ ${totalLiabilities}, Ê∑®ÂÄº ${netWorth}`);

    return netWorth;
  };

  // ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºöÁîüÊàêÊ≠£Á¢∫ÁöÑË≥áÁî¢ËÆäÂåñÊï∏Êìö
  const netWorthData = useMemo(() => {
    try {
      console.log('üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºöÈñãÂßãÁîüÊàêÂúñË°®Êï∏Êìö...');
      const startTime = Date.now();

      const currentDate = new Date();
      const labels: string[] = [];
      const data: number[] = [];

      // Á¢∫‰øùÊï∏ÊìöÂ≠òÂú®‰∏îÁÇ∫Èô£Âàó
      const safeTransactions = Array.isArray(transactions) ? transactions : [];
      const safeAssets = Array.isArray(assets) ? assets : [];
      const safeLiabilities = Array.isArray(liabilities) ? liabilities : [];

      // ‰øÆÂæ©Ôºö‰ΩøÁî®Á∞°ÂñÆÁöÑÁ∏ΩË≥áÁî¢Ë®àÁÆóÔºå‰∏çËÄÉÊÖÆË§áÈõúÁöÑ‰∫§ÊòìÂΩ±Èüø
      const totalAssets = safeAssets.reduce((sum, asset) => sum + (asset?.current_value || asset?.value || 0), 0);
      const totalLiabilities = safeLiabilities.reduce((sum, liability) => sum + (liability?.balance || 0), 0);
      const currentNetWorth = totalAssets - totalLiabilities;

      console.log('üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºöÁï∂ÂâçÊ∑®ÂÄºË®àÁÆó', {
        totalAssets,
        totalLiabilities,
        currentNetWorth
      });

      // ‰øÆÂæ©ÔºöÊâæÂà∞ÊúÄÊó©ÁöÑË≥áÁî¢ÂâµÂª∫ÊôÇÈñì
      let earliestAssetDate = currentDate;
      if (safeAssets.length > 0) {
        safeAssets.forEach(asset => {
          if (asset.created_at || asset.createdAt || asset.last_updated) {
            const assetDate = new Date(asset.created_at || asset.createdAt || asset.last_updated);
            if (assetDate < earliestAssetDate) {
              earliestAssetDate = assetDate;
            }
          }
        });
      }

      console.log('üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºöÊúÄÊó©Ë≥áÁî¢ÂâµÂª∫ÊôÇÈñì', earliestAssetDate.toISOString());

      // ÁîüÊàêËøë12ÂÄãÊúàÁöÑÊ®ôÁ±§ÂíåÊï∏Êìö
      for (let i = 11; i >= 0; i--) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);
        const month = date.getMonth() + 1;
        labels.push(`${month}Êúà`);

        // Áï∂ÂâçÊúà‰ªΩ‰ΩøÁî®ÂØ¶ÈöõÂÄº
        const isCurrentMonth = date.getFullYear() === currentDate.getFullYear() &&
                              date.getMonth() === currentDate.getMonth();

        if (isCurrentMonth) {
          // ‰øÆÂæ©ÔºöÁï∂ÂâçÊúà‰ªΩ‰ΩøÁî®ÂØ¶ÈöõË®àÁÆóÁöÑÊ∑®ÂÄº
          data.push(Math.round(currentNetWorth));
          console.log(`üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºö${month}Êúà(Áï∂Ââç) = ${Math.round(currentNetWorth)}`);
        } else {
          // ‰øÆÂæ©ÔºöÈÅéÂéªÊúà‰ªΩÁöÑËôïÁêÜÈÇèËºØ
          if (date < earliestAssetDate) {
            // ‰øÆÂæ©ÔºöÂ¶ÇÊûúË©≤Êúà‰ªΩÊó©ÊñºÊúÄÊó©Ë≥áÁî¢ÂâµÂª∫ÊôÇÈñìÔºåÂúìÊü±Ê≠∏Èõ∂
            data.push(0);
            console.log(`üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºö${month}Êúà Êó©ÊñºË≥áÁî¢ÂâµÂª∫ÊôÇÈñìÔºåÂúìÊü±Ê≠∏Èõ∂`);
          } else if (currentNetWorth <= 0) {
            // ‰øÆÂæ©ÔºöÂ¶ÇÊûúÁï∂ÂâçÊ∑®ÂÄºÁÇ∫0ÊàñË≤†Êï∏ÔºåÈÅéÂéª‰πüÁÇ∫0
            data.push(0);
            console.log(`üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºö${month}Êúà Áï∂ÂâçÊ∑®ÂÄº‚â§0ÔºåÂúìÊü±Ê≠∏Èõ∂`);
          } else {
            // ‰øÆÂæ©ÔºöË©≤Êúà‰ªΩÊúâË≥áÁî¢Ôºå‰ΩøÁî®ÂØ¶ÈöõÊï∏Â≠óË®àÁÆóÊ≠∑Âè≤ÂÄº
            const monthsFromEarliest = (currentDate.getFullYear() - earliestAssetDate.getFullYear()) * 12 +
                                     (currentDate.getMonth() - earliestAssetDate.getMonth());
            const monthsFromCurrent = i;

            if (monthsFromEarliest <= 1) {
              // ‰øÆÂæ©ÔºöÂ¶ÇÊûúË≥áÁî¢ÂâµÂª∫‰∏çÂà∞‰∏ÄÂÄãÊúàÔºå‰ΩøÁî®Áï∂ÂâçÂÄº
              const value = Math.round(currentNetWorth);
              data.push(value);
              console.log(`üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºö${month}Êúà Ë≥áÁî¢ÂâµÂª∫<1ÊúàÔºå‰ΩøÁî®Áï∂ÂâçÂÄº = ${value}`);
            } else {
              // ‰øÆÂæ©ÔºöÊ†πÊìöÊôÇÈñìÊØî‰æãË®àÁÆóÊ≠∑Âè≤ÂÄºÔºå‰ΩøÁî®ÂØ¶ÈöõÊï∏Â≠ó
              const timeRatio = Math.max(0.1, (monthsFromEarliest - monthsFromCurrent) / monthsFromEarliest);
              const estimatedValue = Math.round(currentNetWorth * timeRatio);
              data.push(estimatedValue);
              console.log(`üìä ‰øÆÂæ©Âπ¥Â∫¶ËÆäÂåñÔºö${month}Êúà ‰º∞ÁÆóÂÄº = ${estimatedValue} (ÊØî‰æã: ${timeRatio.toFixed(2)})`);
            }
          }
        }
      }

      const endTime = Date.now();
      console.log(`üìä ÂúñË°®Êï∏ÊìöÁîüÊàêÂÆåÊàêÔºåËÄóÊôÇ: ${endTime - startTime}ms`);

      return {
        labels,
        datasets: [
          {
            data,
            color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
            strokeWidth: 3,
          },
        ],
      };
    } catch (error) {
      console.error('‚ùå ÂúñË°®Êï∏ÊìöÁîüÊàêÂ§±Êïó:', error);
      return {
        labels: ['1Êúà', '2Êúà', '3Êúà', '4Êúà', '5Êúà', '6Êúà', '7Êúà', '8Êúà', '9Êúà', '10Êúà', '11Êúà', '12Êúà'],
        datasets: [
          {
            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
            strokeWidth: 3,
          },
        ],
      };
    }
  }, [transactions, assets, liabilities]); // Âè™Âú®Êï∏ÊìöËÆäÂåñÊôÇÈáçÊñ∞Ë®àÁÆó

  // netWorthData ÁèæÂú®ÊòØ useMemo ÁöÑÁµêÊûúÔºåÂåÖÂê´ÂúñË°®Êï∏Êìö

  // Ë®àÁÆóÁúüÂØ¶ÁöÑË≤°ÂãôÊëòË¶ÅÊï∏ÊìöÔºà‰ΩøÁî®Áµ±‰∏ÄÁöÑË®àÁÆóÈÇèËºØÔºâ
  const calculateRealFinancialSummary = () => {
    const currentDate = new Date();
    const currentYear = currentDate.getFullYear();
    const currentMonth = currentDate.getMonth();

    const safeTransactions = Array.isArray(transactions) ? transactions : [];
    const safeAssets = Array.isArray(assets) ? assets : [];
    const safeLiabilities = Array.isArray(liabilities) ? liabilities : [];

    const currentMonthTransactions = safeTransactions.filter(t => {
      if (!t || !t.date) return false;
      const tDate = new Date(t.date);
      if (isNaN(tDate.getTime())) return false;
      return tDate.getFullYear() === currentYear && tDate.getMonth() === currentMonth;
    });

    const monthlyIncome = currentMonthTransactions
      .filter(t => t.type === 'income')
      .reduce((sum, t) => sum + (t.amount || 0), 0);

    const monthlyExpenses = currentMonthTransactions
      .filter(t => t.type === 'expense')
      .reduce((sum, t) => sum + (t.amount || 0), 0);

    // ‰øÆÂæ©Ôºö‰ΩøÁî®ËàáË≥áÁî¢Ë≤†ÂÇµÈ†ÅÈù¢Áõ∏ÂêåÁöÑÁ∏ΩË≥áÁî¢Ë®àÁÆóÈÇèËºØ
    const totalAssets = safeAssets.reduce((sum, asset) => sum + (asset?.current_value || asset?.value || 0), 0);
    const totalLiabilities = safeLiabilities.reduce((sum, liability) => sum + (liability?.balance || 0), 0);
    const netWorth = totalAssets - totalLiabilities;

    console.log('üîß ‰øÆÂæ©Ôºö‰ΩøÁî®Ê≠£Á¢∫ÁöÑÁ∏ΩË≥áÁî¢Ë®àÁÆóÈÇèËºØ');
    console.log('- ÂéüÂßãË≥áÁî¢ÂÄºÊ±ÇÂíå:', totalAssets);
    console.log('- ‰∏çÂÜç‰ΩøÁî®Ë§áÈõúÁöÑ‰∫§ÊòìÂΩ±ÈüøË®àÁÆó');

    console.log('üìä ‰øÆÂæ©ÂæåË≤°ÂãôÊëòË¶ÅË®àÁÆóÁµêÊûú:');
    console.log('- Á∏ΩË≥áÁî¢:', totalAssets);
    console.log('- Á∏ΩË≤†ÂÇµ:', totalLiabilities);
    console.log('- Ê∑®ÂÄº:', netWorth);

    return {
      monthlyIncome,
      monthlyExpenses,
      totalAssets: totalAssets,
      totalLiabilities,
      netWorth
    };
  };

  const realSummary = calculateRealFinancialSummary();
  const { topIncomes, topExpenses } = calculateTopIncomeExpense();

  const chartConfig = {
    backgroundColor: '#ffffff',
    backgroundGradientFrom: '#ffffff',
    backgroundGradientTo: '#ffffff',
    decimalPlaces: 0,
    color: (opacity = 1) => `rgba(0, 122, 255, ${opacity})`,
    labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
    style: {
      borderRadius: 16,
    },
    propsForDots: {
      r: '4',
      strokeWidth: '2',
      stroke: '#007AFF',
    },
    propsForLabels: {
      fontSize: 10,
    },
  };

  // Èò≤Ê≠¢ÈÄ£Á∫åÂà∑Êñ∞ÁöÑ ref
  const lastRefreshTime = useRef(0);
  const refreshTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  const onRefresh = async () => {
    const now = Date.now();

    // Èò≤Ê≠¢ÈÄ£Á∫åÂø´ÈÄüÂà∑Êñ∞Ôºà500ms ÂÖßÂè™ÂÖÅË®±‰∏ÄÊ¨°Ôºâ
    if (now - lastRefreshTime.current < 500) {
      console.log('‚ö†Ô∏è Âà∑Êñ∞ÈÅéÊñºÈ†ªÁπÅÔºåÂ∑≤ÂøΩÁï•');
      return;
    }

    lastRefreshTime.current = now;

    // Ê∏ÖÈô§‰πãÂâçÁöÑË∂ÖÊôÇ
    if (refreshTimeoutRef.current) {
      clearTimeout(refreshTimeoutRef.current);
    }

    setRefreshing(true);
    console.log('üîÑ DashboardScreen ÊâãÂãïÂà∑Êñ∞ÊâÄÊúâÊï∏Êìö');

    try {
      setTransactions(transactionDataService.getTransactions());
      setAssets(assetTransactionSyncService.getAssets());
      setLiabilities(liabilityService.getLiabilities());

      // Ë®≠ÁΩÆË∂ÖÊôÇ‰æÜÂÅúÊ≠¢Âà∑Êñ∞ÁãÄÊÖã
      refreshTimeoutRef.current = setTimeout(() => {
        setRefreshing(false);
        refreshTimeoutRef.current = null;
      }, 1000);

    } catch (error) {
      console.error('‚ùå Âà∑Êñ∞Êï∏ÊìöÂ§±Êïó:', error);
      setRefreshing(false);
    }
  };

  const handleSignOut = async () => {
    try {
      console.log('üö™ ÈñãÂßãÁôªÂá∫ÊµÅÁ®ã...');

      // Ë™øÁî® auth store ÁöÑÁôªÂá∫ÊñπÊ≥ï
      await signOut();

      console.log('‚úÖ ÁôªÂá∫ÊàêÂäü');

      // ÂèØÈÅ∏ÔºöÊ∏ÖÈô§Êú¨Âú∞Êï∏ÊìöÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
      // await clearAllStorage();

    } catch (error) {
      console.error('‚ùå ÁôªÂá∫Â§±Êïó:', error);
    }
  };

  // Áî®Êà∂ÂêçÁ®±Á∑®ËºØÁõ∏ÈóúÂáΩÊï∏
  const handleEditName = () => {
    setEditingName(userProfile?.displayName || 'Â∞èÂØåÁøÅ');
    setShowEditNameModal(true);
  };

  const handleSaveName = async () => {
    if (!editingName.trim()) {
      console.error('‚ùå ÂêçÁ®±‰∏çËÉΩÁÇ∫Á©∫');
      return;
    }

    const success = await userProfileService.updateDisplayName(editingName.trim());
    if (success) {
      setUserProfile(userProfileService.getProfile());
      setShowEditNameModal(false);
      console.log('‚úÖ ÂêçÁ®±Â∑≤Êõ¥Êñ∞');
    } else {
      console.error('‚ùå Êõ¥Êñ∞Â§±ÊïóÔºåË´ãÈáçË©¶');
    }
  };

  const handleCancelEdit = () => {
    setEditingName('');
    setShowEditNameModal(false);
  };

  // ‰∏äÂÇ≥ÊåâÈàïËôïÁêÜÂáΩÊï∏
  const handleUploadClick = () => {
    if (user) {
      // Áî®Êà∂Â∑≤ÁôªÈåÑÔºåÁõ¥Êé•ÈÄ≤Ë°åÂêåÊ≠•
      handleSyncToSupabase();
    } else {
      // Áî®Êà∂Êú™ÁôªÈåÑÔºåÈ°ØÁ§∫ÁôªÈåÑÊ®°ÊÖã
      setShowLoginModal(true);
      clearError();
    }
  };

  // ËôïÁêÜÁôªÈåÑ
  const handleLogin = async () => {
    if (!loginEmail.trim() || !loginPassword.trim()) {
      console.error('‚ùå Ë´ãËº∏ÂÖ•ÈõªÂ≠êÈÉµ‰ª∂ÂíåÂØÜÁ¢º');
      return;
    }

    clearError();

    try {
      if (isRegistering) {
        if (loginPassword !== confirmPassword) {
          console.error('‚ùå ÂØÜÁ¢ºÁ¢∫Ë™ç‰∏ç‰∏ÄËá¥');
          return;
        }
        if (loginPassword.length < 6) {
          console.error('‚ùå ÂØÜÁ¢ºÈï∑Â∫¶Ëá≥Â∞ëÈúÄË¶Å6ÂÄãÂ≠óÁ¨¶');
          return;
        }
        console.log('üîê ÈñãÂßãË®ªÂÜäÊµÅÁ®ã:', loginEmail.trim());
        await signUp(loginEmail.trim(), loginPassword);
      } else {
        console.log('üîê ÈñãÂßãÁôªÈåÑÊµÅÁ®ã:', loginEmail.trim());
        await signIn(loginEmail.trim(), loginPassword);
      }

      // Á≠âÂæÖ‰∏Ä‰∏ãËÆìÁãÄÊÖãÊõ¥Êñ∞
      setTimeout(() => {
        const { user: currentUser, error: currentError } = useAuthStore.getState();

        if (currentUser && !currentError) {
          console.log('‚úÖ ÁôªÈåÑ/Ë®ªÂÜäÊàêÂäü:', currentUser.email);
          setShowLoginModal(false);
          resetLoginForm();
          // ÁôªÈåÑÊàêÂäüÂæåËá™ÂãïÂêåÊ≠•
          setTimeout(() => {
            handleSyncToSupabase();
          }, 1000);
        } else if (currentError) {
          console.log('‚ùå ÁôªÈåÑ/Ë®ªÂÜäÂ§±Êïó:', currentError);
          console.error('‚ùå ÁôªÈåÑ/Ë®ªÂÜäÂ§±Êïó:', currentError);
        }
      }, 500);

    } catch (error) {
      console.error('üí• ÁôªÈåÑ/Ë®ªÂÜäÁï∞Â∏∏:', error);
      console.error('‚ùå ÁôªÈåÑÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶');
    }
  };

  // ËôïÁêÜ Google ÁôªÈåÑ
  const handleGoogleLogin = async () => {
    clearError();

    try {
      console.log('üîê ÈñãÂßã Google ÁôªÈåÑÊµÅÁ®ã');
      await signInWithGoogle();

      // Á≠âÂæÖ‰∏Ä‰∏ãËÆìÁãÄÊÖãÊõ¥Êñ∞
      setTimeout(() => {
        const { user: currentUser, error: currentError } = useAuthStore.getState();

        if (currentUser && !currentError) {
          console.log('‚úÖ Google ÁôªÈåÑÊàêÂäü:', currentUser.email);
          setShowLoginModal(false);
          resetLoginForm();
          // ÁôªÈåÑÊàêÂäüÂæåËá™ÂãïÂêåÊ≠•
          setTimeout(() => {
            handleSyncToSupabase();
          }, 1000);
        } else if (currentError) {
          console.log('‚ùå Google ÁôªÈåÑÂ§±Êïó:', currentError);
          Alert.alert('Google ÁôªÈåÑÂ§±Êïó', currentError);
        }
      }, 500);

    } catch (error) {
      console.error('üí• Google ÁôªÈåÑÁï∞Â∏∏:', error);
      Alert.alert('ÈåØË™§', 'Google ÁôªÈåÑÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶');
    }
  };

  // ÈáçÁΩÆÁôªÈåÑË°®ÂñÆ
  const resetLoginForm = () => {
    setLoginEmail('');
    setLoginPassword('');
    setConfirmPassword('');
    setIsRegistering(false);
  };

  // ÈóúÈñâÁôªÈåÑÊ®°ÊÖã
  const handleCloseLoginModal = () => {
    setShowLoginModal(false);
    resetLoginForm();
    clearError();
  };

  // Âº∑Âà∂Âà∑Êñ∞Áî®Êà∂Êï∏ÊìöÔºà‰ΩøÁî®‰∏âÁ®ÆÊñπÊ≥ïÁ¢∫‰øù‰øÆÂæ©Ôºâ
  const handleForceRefreshData = async () => {
    try {
      console.log('üîÑ ÈñãÂßã‰∏âÈáç‰øÆÂæ©Êï∏Êìö...');

      // Ê™¢Êü•Áî®Êà∂ÊòØÂê¶Â∑≤ÁôªÈåÑ
      const { data: { user } } = await supabase.auth.getUser();

      if (!user) {
        console.log('‚ùå Áî®Êà∂Êú™ÁôªÈåÑÔºåÁÑ°Ê≥ïÂà∑Êñ∞Êï∏Êìö');
        Alert.alert('ÈåØË™§', 'Áî®Êà∂Êú™ÁôªÈåÑÔºåÁÑ°Ê≥ïÂà∑Êñ∞Êï∏Êìö');
        return;
      }

      // ‰ΩøÁî®Á∂úÂêà‰øÆÂæ©ÊúçÂãô
      const fixResult = await assetDisplayFixService.comprehensiveFix();

      // ÂêåÊôÇÂà∑Êñ∞‰∫§ÊòìÊï∏Êìö
      await transactionDataService.forceRefreshUserData();

      // Áç≤ÂèñÊúÄÁµÇÁµ±Ë®à
      const transactionStats = transactionDataService.getDataStats();
      const validation = await assetDisplayFixService.validateAssetData();

      console.log('üìä ‰∏âÈáç‰øÆÂæ©ÂÆåÊàêÔºåÊúÄÁµÇÁµ±Ë®à:', {
        transactions: transactionStats.transactions,
        accounts: transactionStats.accounts,
        assets: validation.serviceCount,
        supabaseAssets: validation.supabaseCount
      });

      // È°ØÁ§∫Ë©≥Á¥∞ÁµêÊûú
      const resultMessage = `‰øÆÂæ©ÁµêÊûúÔºö

‚úÖ ÊñπÊ≥ï1 (Áõ¥Êé•Âä†Ëºâ): ${fixResult.methods.method1.success ? 'ÊàêÂäü' : 'Â§±Êïó'} - ${fixResult.methods.method1.count} ÂÄãË≥áÁî¢
‚úÖ ÊñπÊ≥ï2 (ÊúçÂãôÈáçËºâ): ${fixResult.methods.method2.success ? 'ÊàêÂäü' : 'Â§±Êïó'} - ${fixResult.methods.method2.count} ÂÄãË≥áÁî¢
‚úÖ ÊñπÊ≥ï3 (ÂêåÊ≠•Â∏≥Êà∂): ${fixResult.methods.method3.success ? 'ÊàêÂäü' : 'Â§±Êïó'} - ${fixResult.methods.method3.count} ÂÄãË≥áÁî¢

ÊúÄÁµÇÁµ±Ë®àÔºö
‚Ä¢ ‰∫§Êòì: ${transactionStats.transactions} Á≠Ü
‚Ä¢ Â∏≥Êà∂: ${transactionStats.accounts} ÂÄã
‚Ä¢ Ë≥áÁî¢: ${validation.serviceCount} ÂÄã
‚Ä¢ SupabaseË≥áÁî¢: ${validation.supabaseCount} ÂÄã
‚Ä¢ Êï∏Êìö‰∏ÄËá¥ÊÄß: ${validation.consistent ? '‚úÖ' : '‚ùå'}`;

      Alert.alert(
        fixResult.success ? '‰øÆÂæ©ÊàêÂäü' : '‰øÆÂæ©Â§±Êïó',
        resultMessage,
        [{ text: 'Á¢∫ÂÆö' }]
      );

    } catch (error) {
      console.error('‚ùå ‰∏âÈáç‰øÆÂæ©Â§±Êïó:', error);
      Alert.alert('‰øÆÂæ©Â§±Êïó', `ÈåØË™§: ${error.message}`);
    }
  };

  // üöÄ ÂÖ®Êñ∞‰∏äÂÇ≥ÈÇèËºØÔºö‰ΩøÁî®Áµ±‰∏ÄÊï∏ÊìöÁÆ°ÁêÜÂô®
  const handleSyncToSupabase = async () => {
    try {
      console.log('üöÄ ÂÖ®Êñ∞‰∏äÂÇ≥ÔºöÈñãÂßã‰ΩøÁî®Áµ±‰∏ÄÊï∏ÊìöÁÆ°ÁêÜÂô®‰∏äÂÇ≥...');

      // Ê™¢Êü•Áî®Êà∂ÊòØÂê¶Â∑≤ÁôªÈåÑ
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÁôªÈåÑÊâçËÉΩ‰∏äÂÇ≥Êï∏Êìö');
        return;
      }

      console.log('‚úÖ ÂÖ®Êñ∞‰∏äÂÇ≥ÔºöÁî®Êà∂Â∑≤ÁôªÈåÑÔºåÈñãÂßã‰∏äÂÇ≥ÊµÅÁ®ã');

      // È°ØÁ§∫‰∏äÂÇ≥ÈÄ≤Â∫¶
      Alert.alert('‰∏äÂÇ≥‰∏≠', 'Ê≠£Âú®‰∏äÂÇ≥Êú¨Âú∞Êï∏ÊìöÂà∞Èõ≤Á´ØÔºåË´ãÁ®çÂÄô...', [], { cancelable: false });

      // ÂàùÂßãÂåñÁµ±‰∏ÄÊï∏ÊìöÁÆ°ÁêÜÂô®
      await unifiedDataManager.initialize();

      // ‰ΩøÁî®Áµ±‰∏ÄÊï∏ÊìöÁÆ°ÁêÜÂô®‰∏äÂÇ≥
      const result = await unifiedDataManager.uploadAllToCloud();

      console.log('üéØ ÂÖ®Êñ∞‰∏äÂÇ≥Ôºö‰∏äÂÇ≥ÁµêÊûú:', result);

      if (result.errors.length === 0) {
        // ‰∏äÂÇ≥ÊàêÂäü
        Alert.alert(
          '‰∏äÂÇ≥ÊàêÂäüÔºÅ',
          `Â∑≤ÊàêÂäü‰∏äÂÇ≥ ${result.uploaded} Á≠ÜÊï∏ÊìöÂà∞Èõ≤Á´ØÔºÅ\n\nÊï∏ÊìöÂ∑≤ÂÆâÂÖ®‰øùÂ≠òÂà∞Èõ≤Á´ØÂ≠òÂÑ≤„ÄÇ`,
          [{ text: 'Á¢∫ÂÆö', onPress: () => console.log('‚úÖ ÂÖ®Êñ∞‰∏äÂÇ≥ÔºöÁî®Êà∂Á¢∫Ë™ç‰∏äÂÇ≥ÊàêÂäü') }]
        );
      } else {
        // ÈÉ®ÂàÜÂ§±Êïó
        Alert.alert(
          '‰∏äÂÇ≥ÈÉ®ÂàÜÊàêÂäü',
          `ÊàêÂäü‰∏äÂÇ≥Ôºö${result.uploaded} Á≠Ü\nÈåØË™§Ôºö${result.errors.length} ÂÄã\n\nÈåØË™§Ë©≥ÊÉÖÔºö\n${result.errors.join('\n')}`,
          [{ text: 'Á¢∫ÂÆö', onPress: () => console.log('‚ö†Ô∏è ÂÖ®Êñ∞‰∏äÂÇ≥ÔºöÁî®Êà∂Á¢∫Ë™çÈÉ®ÂàÜÊàêÂäü') }]
        );
      }

    } catch (error) {
      console.error('‚ùå ÂÖ®Êñ∞‰∏äÂÇ≥Ôºö‰∏äÂÇ≥Â§±Êïó:', error);
      Alert.alert(
        '‰∏äÂÇ≥Â§±Êïó',
        `‰∏äÂÇ≥ÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`,
        [{ text: 'Á¢∫ÂÆö', onPress: () => console.log('‚ùå ÂÖ®Êñ∞‰∏äÂÇ≥ÔºöÁî®Êà∂Á¢∫Ë™ç‰∏äÂÇ≥ÈåØË™§') }]
      );
    }
  };

  // Ë®∫Êñ∑ Supabase Ë°®ÁµêÊßã
  const handleDiagnoseSupabase = async () => {
    console.log('üî• Ë®∫Êñ∑ÊåâÈàïË¢´ÈªûÊìäÔºÅ');
    Alert.alert('Ë®∫Êñ∑ÊåâÈàïÊ∏¨Ë©¶', 'Ë®∫Êñ∑ÊåâÈàïÊ≠£Â∏∏Â∑•‰ΩúÔºÅ');

    try {
      console.log('üö® ÈñãÂßãË∂ÖÁ¥öË®∫Êñ∑Âíå‰øÆÂæ©...');
      Alert.alert('ÈñãÂßãË®∫Êñ∑', 'Ê≠£Âú®Âü∑Ë°åË∂ÖÁ¥ö‰øÆÂæ©ÔºåË´ãÊü•ÁúãÊéßÂà∂Âè∞Êó•Ë™å...');

      // Ê≠•È©ü 0: Ê™¢Êü•Áî®Êà∂ÁôªÈåÑÁãÄÊÖã
      const { data: { user: currentUser }, error: userError } = await supabase.auth.getUser();
      console.log('üë§ Áî®Êà∂ÁãÄÊÖã:', currentUser ? `Â∑≤ÁôªÈåÑ (${currentUser.email})` : 'Êú™ÁôªÈåÑ');

      if (!currentUser) {
        Alert.alert('ÈåØË™§', 'Ë´ãÂÖàÁôªÈåÑ');
        return;
      }

      console.log('üîç Ê≠•È©ü 1: Ê™¢Êü• Supabase ÈÄ£Êé•...');

      // Ê≠•È©ü 1: Ê∏¨Ë©¶Âü∫Êú¨ÈÄ£Êé•
      try {
        const { count, error: testError } = await supabase
          .from('assets')
          .select('*', { count: 'exact', head: true })
          .eq('user_id', currentUser.id);

        if (testError) {
          console.error('‚ùå Supabase ÈÄ£Êé•Ê∏¨Ë©¶Â§±Êïó:', testError);
          Alert.alert('ÈÄ£Êé•Â§±Êïó', `Supabase ÈÄ£Êé•ÊúâÂïèÈ°å: ${testError.message}`);
          return;
        }
        console.log('‚úÖ Supabase ÈÄ£Êé•Ê≠£Â∏∏ÔºåË≥áÁî¢Êï∏Èáè:', count);
      } catch (connectionError) {
        console.error('‚ùå ÈÄ£Êé•Ê∏¨Ë©¶Áï∞Â∏∏:', connectionError);
        Alert.alert('ÈÄ£Êé•Áï∞Â∏∏', 'ÁÑ°Ê≥ïÈÄ£Êé•Âà∞ Supabase');
        return;
      }

      console.log('üîç Ê≠•È©ü 2: Áç≤ÂèñË≥áÁî¢Êï∏Êìö...');

      // Ê≠•È©ü 2: Áç≤ÂèñË≥áÁî¢Êï∏Êìö
      const { data: supabaseAssets, error: assetsError } = await supabase
        .from('assets')
        .select('*')
        .eq('user_id', currentUser.id);

      if (assetsError) {
        console.error('‚ùå Áç≤ÂèñË≥áÁî¢Â§±Êïó:', assetsError);
        Alert.alert('Áç≤ÂèñÂ§±Êïó', `ÁÑ°Ê≥ïÁç≤ÂèñË≥áÁî¢Êï∏Êìö: ${assetsError.message}`);
        return;
      }

      console.log(`üìä Âæû Supabase Áç≤Âæó ${supabaseAssets?.length || 0} È†ÖË≥áÁî¢`);

      if (supabaseAssets && supabaseAssets.length > 0) {
        console.log('üìã ÂéüÂßãË≥áÁî¢Êï∏Êìö:', supabaseAssets);

        console.log('üîç Ê≠•È©ü 3: ËΩâÊèõË≥áÁî¢Ê†ºÂºè...');

        // Ê≠•È©ü 3: ËΩâÊèõÁÇ∫Êú¨Âú∞Ê†ºÂºè
        const localAssets = supabaseAssets.map((asset: any, index: number) => {
          const converted = {
            id: asset.id,
            name: asset.name || `Ë≥áÁî¢${index + 1}`,
            type: asset.type || 'bank',
            quantity: Number(asset.quantity) || 1,
            cost_basis: Number(asset.cost_basis || asset.value || asset.current_value || 0),
            current_value: Number(asset.current_value || asset.value || asset.cost_basis || 0),
            stock_code: asset.stock_code,
            purchase_price: Number(asset.purchase_price || 0),
            current_price: Number(asset.current_price || 0),
            last_updated: asset.updated_at || asset.created_at,
            sort_order: Number(asset.sort_order) || index
          };
          console.log(`‚úÖ ËΩâÊèõË≥áÁî¢ ${index + 1}: ${converted.name} = ${converted.current_value}`);
          return converted;
        });

        console.log('üîç Ê≠•È©ü 4: ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÑ≤...');

        // Ê≠•È©ü 4: ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÑ≤ - ‰ΩøÁî®Ê≠£Á¢∫ÁöÑÈçµÂêç
        await AsyncStorage.setItem('@FinTranzo:assets', JSON.stringify(localAssets));
        console.log('‚úÖ Â∑≤‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÑ≤ (‰ΩøÁî®Ê≠£Á¢∫ÈçµÂêç: @FinTranzo:assets)');

        console.log('üîç Ê≠•È©ü 5: Áõ¥Êé•Êõ¥Êñ∞ UI ÁãÄÊÖã...');

        // Ê≠•È©ü 5: Áõ¥Êé•Êõ¥Êñ∞ÁãÄÊÖãÔºå‰∏ç‰æùË≥¥‰ªª‰ΩïÊúçÂãô
        setAssets(localAssets);
        setForceRefresh(prev => prev + 1);

        console.log('üîç Ê≠•È©ü 6: ÁôºÈÄÅ‰∫ã‰ª∂ÈÄöÁü•...');

        // Ê≠•È©ü 6: Ë∑≥ÈÅé‰∫ã‰ª∂ÈÄöÁü•ÔºåÈÅøÂÖçÂ∞éÂÖ•ÈåØË™§
        console.log('‚ö†Ô∏è Ë∑≥ÈÅé‰∫ã‰ª∂ÁôºÈÄÅÔºåÈÅøÂÖçÂ∞éÂÖ•ÈåØË™§');

        console.log('üîç Ê≠•È©ü 7: Âº∑Âà∂Âà∑Êñ∞Êï∏Êìö...');

        // Ê≠•È©ü 7: Âº∑Âà∂ÈáçÊñ∞Âä†ËºâË≥áÁî¢ÊúçÂãô‰∏¶Êõ¥Êñ∞ÁãÄÊÖã
        await assetTransactionSyncService.forceReload();
        setTransactions(transactionDataService.getTransactions());
        setAssets(assetTransactionSyncService.getAssets());
        setLiabilities(liabilityService.getLiabilities());
        setForceRefresh(prev => prev + 1);

        console.log('‚úÖ Ë≥áÁî¢ÊúçÂãôÂ∑≤Âº∑Âà∂ÈáçÊñ∞Âä†Ëºâ');

        const totalValue = localAssets.reduce((sum, asset) => sum + asset.current_value, 0);
        console.log(`‚úÖ Ë∂ÖÁ¥ö‰øÆÂæ©ÂÆåÊàêÔºÅÁ∏ΩÂÉπÂÄº: ${totalValue}`);

        // Ê≠•È©ü 8: È©óË≠âÂêåÊ≠•ÁµêÊûú
        console.log('üîç Ê≠•È©ü 8: È©óË≠âÂêåÊ≠•ÁµêÊûú...');
        const verifyAssets = assetTransactionSyncService.getAssets();
        console.log('üìä È©óË≠âÁµêÊûú: Ë≥áÁî¢ÊúçÂãô‰∏≠ÁöÑË≥áÁî¢Êï∏Èáè:', verifyAssets.length);
        console.log('üìä È©óË≠âÁµêÊûú: Ë≥áÁî¢ÊúçÂãô‰∏≠ÁöÑÁ∏ΩÂÉπÂÄº:', verifyAssets.reduce((sum, asset) => sum + asset.current_value, 0));

        Alert.alert(
          'Ë∂ÖÁ¥ö‰øÆÂæ©ÊàêÂäüÔºÅ',
          `Â∑≤ÊàêÂäüÁç≤Âèñ‰∏¶Ë®≠ÁΩÆ ${localAssets.length} È†ÖË≥áÁî¢„ÄÇ\nÁ∏ΩÂÉπÂÄº: ${totalValue.toLocaleString()} ÂÖÉ\n\nË≥áÁî¢ÊúçÂãôÈ©óË≠â: ${verifyAssets.length} È†ÖË≥áÁî¢\n\nË´ãÊ™¢Êü•Ë≥áÁî¢Ë≤†ÂÇµË°®ÊòØÂê¶Ê≠£Á¢∫È°ØÁ§∫„ÄÇ`
        );

      } else {
        console.log('üìù Supabase ‰∏≠Ê≤íÊúâÊâæÂà∞Ë≥áÁî¢Êï∏Êìö');

        // Ê™¢Êü•ÊòØÂê¶ÊúâÂÖ∂‰ªñË°®ÁöÑÊï∏Êìö
        console.log('üîç Ê™¢Êü•ÂÖ∂‰ªñË°®ÁöÑÊï∏Êìö...');
        try {
          const { count: transactionCount } = await supabase
            .from('transactions')
            .select('*', { count: 'exact', head: true })
            .eq('user_id', currentUser.id);

          const { count: liabilityCount } = await supabase
            .from('liabilities')
            .select('*', { count: 'exact', head: true })
            .eq('user_id', currentUser.id);

          console.log('üìä ÂÖ∂‰ªñÊï∏ÊìöÁµ±Ë®à:', {
            transactions: transactionCount,
            liabilities: liabilityCount
          });
        } catch (checkError) {
          console.log('‚ö†Ô∏è Ê™¢Êü•ÂÖ∂‰ªñË°®Â§±Êïó:', checkError);
        }

        Alert.alert(
          'Ê≤íÊúâË≥áÁî¢Êï∏Êìö',
          'Supabase ‰∏≠Ê≤íÊúâÊâæÂà∞ÊÇ®ÁöÑË≥áÁî¢Êï∏Êìö„ÄÇ\n\nË´ãÂÖàÂú®Ë≥áÁî¢Ë≤†ÂÇµÈ†ÅÈù¢Ê∑ªÂä†‰∏Ä‰∫õË≥áÁî¢ÔºåÁÑ∂ÂæåÂÜçÂòóË©¶ÂêåÊ≠•„ÄÇ'
        );
      }

    } catch (error) {
      console.error('‚ùå Ë∂ÖÁ¥ö‰øÆÂæ©Â§±Êïó:', error);
      Alert.alert(
        '‰øÆÂæ©Â§±Êïó',
        `‰øÆÂæ©ÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§Ôºö\n${error.message || 'Êú™Áü•ÈåØË™§'}\n\nË´ãÊü•ÁúãÊéßÂà∂Âè∞Êó•Ë™å‰∫ÜËß£Ë©≥Á¥∞‰ø°ÊÅØ„ÄÇ`
      );
    }
  };

  // üóëÔ∏è ÂèØÈù†Âà™Èô§Ôºö‰ΩøÁî®ÂèØÈù†Âà™Èô§ÊúçÂãô
  const handleClearAllData = async () => {
    console.log('üóëÔ∏è ÂèØÈù†Âà™Èô§ÔºöÊ∏ÖÁ©∫ÊåâÈàïË¢´ÈªûÊìä');

    Alert.alert(
      'Á¢∫ÂÆöÂà™Èô§ÊâÄÊúâË≥áÊñôÔºü',
      'Ê≠§Êìç‰ΩúÂ∞áÊ∞∏‰πÖÂà™Èô§Ôºö\n‚Ä¢ ÊâÄÊúâ‰∫§ÊòìË®òÈåÑ\n‚Ä¢ ÊâÄÊúâË≥áÁî¢\n‚Ä¢ ÊâÄÊúâË≤†ÂÇµ\n\nÊ≠§Êìç‰ΩúÊúÉÂêåÊôÇÊ∏ÖÁ©∫Êú¨Âú∞ÂíåÈõ≤Á´ØÊï∏ÊìöÔºåÁÑ°Ê≥ïÊí§Èä∑ÔºÅ',
      [
        {
          text: 'ÂèñÊ∂à',
          style: 'cancel',
        },
        {
          text: 'Á¢∫ÂÆöÂà™Èô§',
          style: 'destructive',
          onPress: async () => {
            try {
              setIsLoading(true);

              // ‰ΩøÁî®ÂèØÈù†Âà™Èô§ÊúçÂãô
              const result = await ReliableDeleteService.clearAllData({
                verifyDeletion: true,
                retryCount: 3,
                timeout: 15000
              });

              if (result.success) {
                console.log('‚úÖ ÂèØÈù†Âà™Èô§ÔºöÊ∏ÖÁ©∫ÊàêÂäü');

                // ÈáçÊñ∞Âä†ËºâÊï∏Êìö
                await loadDashboardData();

                Alert.alert(
                  'Âà™Èô§ÊàêÂäü',
                  `Â∑≤ÊàêÂäüÂà™Èô§ ${result.deletedCount} Á≠ÜÊï∏Êìö\n\nÊú¨Âú∞Â≠òÂÑ≤: ${result.details.localStorage ? '‚úÖ' : '‚ùå'}\nÈõ≤Á´ØÂ≠òÂÑ≤: ${result.details.cloudStorage ? '‚úÖ' : '‚ùå'}\nÈ©óË≠âÁµêÊûú: ${result.details.verification ? '‚úÖ' : '‚ùå'}`,
                  [{ text: 'Á¢∫ÂÆö' }]
                );
              } else {
                console.error('‚ùå ÂèØÈù†Âà™Èô§ÔºöÊ∏ÖÁ©∫Â§±Êïó:', result.errors);
                Alert.alert(
                  'Âà™Èô§Â§±Êïó',
                  `Âà™Èô§ÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§Ôºö\n${result.errors.join('\n')}`,
                  [{ text: 'Á¢∫ÂÆö' }]
                );
              }
            } catch (error) {
              console.error('‚ùå ÂèØÈù†Âà™Èô§ÔºöÊìç‰ΩúÁï∞Â∏∏:', error);
              Alert.alert(
                'Âà™Èô§Â§±Êïó',
                `Êìç‰ΩúÈÅéÁ®ã‰∏≠ÁôºÁîüÈåØË™§Ôºö${error.message}`,
                [{ text: 'Á¢∫ÂÆö' }]
              );
            } finally {
              setIsLoading(false);
            }
          }
        }
      ]
    );
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('zh-TW', {
      style: 'currency',
      currency: 'TWD',
      minimumFractionDigits: 0,
    }).format(amount);
  };

  const formatPercentage = (value: number) => {
    return `${(value * 100).toFixed(1)}%`;
  };

  const getTimeRangeText = () => {
    switch (timeRange) {
      case 'today': return '‰ªäÊó•';
      case 'week': return 'Êú¨ÈÄ±';
      case 'month': return 'Êú¨Êúà';
      case 'total': return 'Á∏ΩË®à';
      default: return 'Êú¨Êúà';
    }
  };

  return (
    <ErrorBoundary>
      <View style={styles.container}>
        <StatusBar style="dark" />

      {/* Header */}
      <View style={[styles.header, { paddingTop: Math.max(insets.top + 8, 16) }]}>
        <View style={styles.userInfo}>
          <View style={styles.greetingContainer}>
            <Text style={styles.greeting}>ÊÇ®Â•ΩÔºå</Text>
            <TouchableOpacity onPress={handleEditName} style={styles.editNameButton}>
              <Ionicons name="create-outline" size={16} color="#007AFF" />
            </TouchableOpacity>

            {/* È°ØÁ§∫ÁôªÈåÑÁãÄÊÖã - Á∑äË≤ºÁ∑®ËºØÊåâÈàïÂè≥ÂÅ¥ */}
            {user ? (
              <View style={[styles.loginStatusContainer, styles.loggedInContainer]}>
                <Ionicons name="checkmark-circle" size={12} color="#34C759" />
                <Text style={styles.loginStatusText}>{user.email}</Text>
              </View>
            ) : (
              <View style={[styles.loginStatusContainer, styles.loggedOutContainer]}>
                <Ionicons name="alert-circle-outline" size={12} color="#FF9500" />
                <Text style={styles.logoutStatusText}>Êú™ÁôªÈåÑ</Text>
              </View>
            )}
          </View>
          <Text style={styles.userName}>{userProfile?.displayName || 'Â∞èÂØåÁøÅ'}</Text>
        </View>

        <View style={styles.headerButtons}>
          {/* ÂêåÊ≠•ÁãÄÊÖãÊåáÁ§∫Âô® */}
          <SyncStatusIndicator style={styles.syncIndicator} />

          {/* ‰∏äÂÇ≥ÊåâÈàï - Âè™Âú®Â∑≤ÁôªÈåÑÊôÇÈ°ØÁ§∫ */}
          {user && (
            <TouchableOpacity onPress={handleSyncToSupabase} style={styles.uploadButton}>
              <Ionicons name="cloud-upload-outline" size={20} color="#007AFF" />
              <Text style={{ fontSize: 10, color: '#007AFF' }}>‰∏äÂÇ≥</Text>
            </TouchableOpacity>
          )}

          {/* Âà∑Êñ∞Êï∏ÊìöÊåâÈàï - Âè™Âú®Â∑≤ÁôªÈåÑÊôÇÈ°ØÁ§∫ */}
          {user && (
            <TouchableOpacity onPress={handleForceRefreshData} style={[styles.uploadButton, { marginLeft: 8 }]}>
              <Ionicons name="refresh-outline" size={20} color="#34C759" />
              <Text style={{ fontSize: 10, color: '#34C759' }}>Âà∑Êñ∞</Text>
            </TouchableOpacity>
          )}

          {/* ÁôªÂá∫ÊåâÈàï - Âèñ‰ª£Ë®∫Êñ∑ÊåâÈàïÔºåÊ∞∏ÈÅ†È°ØÁ§∫ */}
          <TouchableOpacity
            onPress={user ? handleSignOut : () => console.log('Êú™ÁôªÈåÑ')}
            style={[styles.signOutButton, { opacity: user ? 1 : 0.3 }]}
          >
            <Ionicons name="log-out-outline" size={20} color="#FF9500" />
            <Text style={{ fontSize: 10, color: '#FF9500' }}>
              {user ? 'ÁôªÂá∫' : 'Êú™ÁôªÈåÑ'}
            </Text>
          </TouchableOpacity>

          {/* Ë®∫Êñ∑ÊåâÈàï - Âè™Âú®Â∑≤ÁôªÈåÑÊôÇÈ°ØÁ§∫ */}
          {user && (
            <DiagnosticButton style={styles.diagnoseButton} />
          )}

          {/* ‰∏ÄÈçµÊ∏ÖÈô§ÊåâÈàï */}
          <TouchableOpacity onPress={handleClearAllData} style={styles.clearDataButton}>
            <Ionicons name="trash-outline" size={20} color="#FF3B30" />
          </TouchableOpacity>
        </View>

      </View>

      {/* ÁôªÈåÑÊèêÁ§∫Ê©´ÂπÖ - Âè™Âú®Êú™ÁôªÈåÑÊôÇÈ°ØÁ§∫ */}
      {!user && (
        <View style={styles.loginBanner}>
          <View style={styles.loginBannerContent}>
            <Ionicons name="cloud-outline" size={24} color="#007AFF" />
            <View style={styles.loginBannerText}>
              <Text style={styles.loginBannerTitle}>È´îÈ©óÈõ≤Á´ØÂêåÊ≠•</Text>
              <Text style={styles.loginBannerSubtitle}>ÁôªÈåÑÂæåÂèØÂú®Â§öË®≠ÂÇôÈñìÂêåÊ≠•ÊÇ®ÁöÑË≤°ÂãôÊï∏Êìö</Text>
            </View>
            <TouchableOpacity onPress={handleUploadClick} style={styles.loginBannerButton}>
              <Text style={styles.loginBannerButtonText}>ÁôªÈåÑ</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}

      <ScrollView
        style={styles.content}
        contentContainerStyle={{
          paddingBottom: Math.max(insets.bottom + 80, 100), // Á¢∫‰øùÂ∫ïÈÉ®ÊúâË∂≥Â§†Á©∫Èñì
        }}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        {/* Net Worth Chart */}
        <View style={styles.chartCard}>
          <Text style={styles.cardTitle}>Ëøë‰∏ÄÂπ¥Ë≥áÁî¢ËÆäÂåñ</Text>
          <Text style={[
            styles.netWorthAmount,
            realSummary.netWorth < 0 && styles.negativeAmount
          ]}>
            {formatCurrency(realSummary.netWorth)}
          </Text>
          {/* ÂØ¶ÈöõÁöÑË≥áÁî¢ËÆäÂåñÂúñË°® */}
          <View style={styles.chartContainer}>
            {(() => {
              if (netWorthData.labels.length === 0 || netWorthData.datasets[0].data.length === 0) {
                return (
                  <View style={styles.chartPlaceholder}>
                    <Text style={styles.chartPlaceholderText}>Êö´ÁÑ°Ë≥áÁî¢ËÆäÂåñÊï∏Êìö</Text>
                    <Text style={styles.chartPlaceholderSubtext}>
                      ÈñãÂßãË®òÂ∏≥ÂæåÂ∞áÈ°ØÁ§∫Ë≥áÁî¢ËÆäÂåñË∂®Âã¢
                    </Text>
                  </View>
                );
              }

              // Á≤æÊ∫ñ‰øÆÂæ©ÔºöÂπ¥Â∫¶ËÆäÂåñË®àÁÆóÈÇèËºØÔºàÊ†πÊìöË≥áÁî¢ÂâµÂª∫ÊôÇÈñìÔºâ
              const latestValue = netWorthData.datasets[0].data[netWorthData.datasets[0].data.length - 1];
              const firstValue = netWorthData.datasets[0].data[0];
              const change = latestValue - firstValue;

              console.log('üìä Á≤æÊ∫ñ‰øÆÂæ©ÔºöÂπ¥Â∫¶ËÆäÂåñË®àÁÆó');
              console.log('- Áï∂ÂâçÂÄº:', latestValue);
              console.log('- ‰∏ÄÂπ¥ÂâçÂÄº:', firstValue);
              console.log('- ËÆäÂåñ:', change);

              // Á∑äÊÄ•‰øÆÂæ©ÔºöÊ†πÊìöÂØ¶ÈöõÊï∏ÊìöÊÉÖÊ≥ÅË®àÁÆóÂπ¥Â∫¶ËÆäÂåñ
              let displayLabel, displayValue, changePercent, isFirstMonth;

              // Á∑äÊÄ•‰øÆÂæ©ÔºöÊ™¢Êü•ÊòØÂê¶ÊúâË∂≥Â§†ÁöÑÊ≠∑Âè≤Êï∏Êìö
              const hasHistoricalData = netWorthData.datasets[0].data.some((value, index) =>
                index < netWorthData.datasets[0].data.length - 1 && value > 0
              );

              if (!hasHistoricalData || firstValue === 0) {
                // Á∑äÊÄ•‰øÆÂæ©ÔºöÊ≤íÊúâÊ≠∑Âè≤Êï∏ÊìöÊàñ‰∏ÄÂπ¥ÂâçÁÇ∫0ÔºåÈ°ØÁ§∫Áï∂ÂâçÁ∏ΩË≥áÁî¢
                displayLabel = 'Áï∂ÂâçÁ∏ΩË≥áÁî¢';
                displayValue = latestValue;
                changePercent = 0;
                isFirstMonth = true; // Á∑äÊÄ•‰øÆÂæ©ÔºöÂÆöÁæ© isFirstMonth ËÆäÊï∏
                console.log('üìä Á∑äÊÄ•‰øÆÂæ©ÔºöÁÑ°Ê≠∑Âè≤Êï∏ÊìöÔºåÈ°ØÁ§∫Áï∂ÂâçÁ∏ΩË≥áÁî¢');
              } else {
                // Á∑äÊÄ•‰øÆÂæ©ÔºöÊúâÊ≠∑Âè≤Êï∏ÊìöÔºåË®àÁÆóÂπ¥Â∫¶ËÆäÂåñ
                displayLabel = 'Âπ¥Â∫¶ËÆäÂåñ';
                displayValue = change;
                isFirstMonth = false; // Á∑äÊÄ•‰øÆÂæ©ÔºöÂÆöÁæ© isFirstMonth ËÆäÊï∏

                if (firstValue === 0) {
                  // Á∑äÊÄ•‰øÆÂæ©ÔºöÂæû0ÈñãÂßãÔºåÊàêÈï∑ÁéáÁÇ∫ÁÑ°ÈôêÂ§ßÔºà0‚Üí100Ëê¨È°ØÁ§∫+100Ëê¨(‚àû%)Ôºâ
                  changePercent = '‚àû';
                  console.log('üìä Á∑äÊÄ•‰øÆÂæ©ÔºöÂæû0ÊàêÈï∑ÔºåÈ°ØÁ§∫‚àû%');
                } else {
                  // Á∑äÊÄ•‰øÆÂæ©ÔºöÊ≠£Á¢∫Ë®àÁÆóÊàêÈï∑Áéá
                  // Áï∂ÊúàË≥áÁî¢/‰∏ÄÂπ¥ÂâçÁöÑË≥áÁî¢ - 1 = ÊàêÈï∑Áéá
                  // ‰æãÂ¶ÇÔºö500Ëê¨/100Ëê¨ - 1 = 4 = 400%
                  changePercent = Math.round(((latestValue / firstValue) - 1) * 100);
                  console.log('üìä Á∑äÊÄ•‰øÆÂæ©ÔºöË®àÁÆóÊàêÈï∑Áéá:', `${latestValue}/${firstValue} - 1 = ${changePercent}%`);
                }
              }

              return (
                <View style={styles.chartDataContainer}>
                  <View style={styles.chartSummaryRow}>
                    <Text style={styles.chartSummaryLabel}>
                      {displayLabel}
                    </Text>
                    <Text style={[
                      styles.chartSummaryValue,
                      isFirstMonth ? styles.neutralChange : (change >= 0 ? styles.positiveChange : styles.negativeChange)
                    ]}>
                      {isFirstMonth ?
                        formatCurrency(displayValue) :
                        `${change >= 0 ? '+' : ''}${formatCurrency(displayValue)} (${changePercent}${changePercent === '‚àû' ? '' : '%'})`
                      }
                    </Text>
                  </View>
                  <View style={styles.chartTrendContainer}>
                    {netWorthData.datasets[0].data.map((value, index) => {
                      // ÁµÇÊ•µ‰øÆÂæ©ÔºöÈÅéÂéªÈáëÈ°çÁÇ∫Èõ∂ÊôÇÂúìÊü±ÂÆåÂÖ®Ê≠∏Èõ∂Ôºå‰ΩøÁî®ÂØ¶ÈöõÊï∏Â≠ó
                      const maxValue = Math.max(...netWorthData.datasets[0].data.map(v => Math.abs(v || 0)));
                      const safeValue = value || 0;

                      console.log(`üìä ÁµÇÊ•µ‰øÆÂæ©ÔºöÊü±ÁãÄÂúñÁ¨¨${index}ÂÄãÂÄº: ${safeValue}, ÊúÄÂ§ßÂÄº: ${maxValue}`);

                      // ÁµÇÊ•µ‰øÆÂæ©ÔºöÂ¶ÇÊûúÂÄºÁÇ∫0ÔºåÈ´òÂ∫¶Â∞±ÊòØ0ÔºàÂúìÊü±ÂÆåÂÖ®Ê≠∏Èõ∂Ôºâ
                      let height;
                      if (safeValue === 0) {
                        height = 0;
                        console.log(`üìä ÁµÇÊ•µ‰øÆÂæ©ÔºöÁ¨¨${index}ÂÄãÊü±Â≠êÂÄºÁÇ∫0ÔºåÈ´òÂ∫¶Ë®≠ÁÇ∫0`);
                      } else if (maxValue > 0) {
                        height = Math.max(2, Math.abs(safeValue) / maxValue * 40);
                        console.log(`üìä ÁµÇÊ•µ‰øÆÂæ©ÔºöÁ¨¨${index}ÂÄãÊü±Â≠êË®àÁÆóÈ´òÂ∫¶: ${height}`);
                      } else {
                        height = 2;
                        console.log(`üìä ÁµÇÊ•µ‰øÆÂæ©ÔºöÁ¨¨${index}ÂÄãÊü±Â≠ê‰ΩøÁî®ÈªòË™çÈ´òÂ∫¶: ${height}`);
                      }

                      // Á¢∫‰øùÈ´òÂ∫¶ÊòØÊúâÊïàÊï∏Â≠ó
                      const finalHeight = isNaN(height) ? 0 : height;

                      return (
                        <View
                          key={index}
                          style={[
                            styles.chartBar,
                            {
                              height: finalHeight,
                              backgroundColor: safeValue >= 0 ? '#34C759' : '#FF3B30',
                              // ÁµÇÊ•µ‰øÆÂæ©ÔºöÁï∂È´òÂ∫¶ÁÇ∫0ÊôÇÔºåÂÆåÂÖ®‰∏çÈ°ØÁ§∫Ôºà‰∏çË®≠ÁΩÆminHeightÔºâ
                              opacity: finalHeight === 0 ? 0 : 1
                            }
                          ]}
                        />
                      );
                    })}
                  </View>
                  <View style={styles.chartLabelsContainer}>
                    <Text style={styles.chartLabel}>{netWorthData.labels[0]}</Text>
                    <Text style={styles.chartLabel}>{netWorthData.labels[Math.floor(netWorthData.labels.length / 2)]}</Text>
                    <Text style={styles.chartLabel}>{netWorthData.labels[netWorthData.labels.length - 1]}</Text>
                  </View>
                </View>
              );
            })()}
          </View>
        </View>

        {/* Bento Grid Layout */}
        <View style={styles.bentoGrid}>
          {/* Financial Summary Cards */}
          <View style={styles.summaryRow}>
            <View style={[styles.summaryCard, styles.assetsCard]}>
              <Text style={styles.summaryLabel}>Á∏ΩË≥áÁî¢</Text>
              <Text style={styles.summaryAmount}>
                {formatCurrency(realSummary.totalAssets)}
              </Text>
            </View>
            <View style={[styles.summaryCard, styles.liabilitiesCard]}>
              <Text style={styles.summaryLabel}>Á∏ΩË≤†ÂÇµ</Text>
              <Text style={styles.summaryAmount}>
                {formatCurrency(realSummary.totalLiabilities)}
              </Text>
            </View>
          </View>

          <View style={styles.summaryRow}>
            <View style={[styles.summaryCard, styles.incomeCard]}>
              <Text style={styles.summaryLabel}>ÊúàÊî∂ÂÖ•</Text>
              <Text style={styles.summaryAmount}>
                {formatCurrency(realSummary.monthlyIncome)}
              </Text>
            </View>
            <View style={[styles.summaryCard, styles.expenseCard]}>
              <Text style={styles.summaryLabel}>ÊúàÊîØÂá∫</Text>
              <Text style={styles.summaryAmount}>
                {formatCurrency(realSummary.monthlyExpenses)}
              </Text>
            </View>
          </View>

          {/* Top Incomes */}
          <View style={styles.topCard}>
            <View style={styles.cardHeader}>
              <Text style={styles.cardTitle}>ÊúÄÂ§ßÊî∂ÂÖ• TOP 5</Text>
              <View style={styles.timeRangeSelector}>
                {(['today', 'week', 'month', 'total'] as const).map((range) => (
                  <TouchableOpacity
                    key={range}
                    style={[
                      styles.timeRangeButton,
                      timeRange === range && styles.timeRangeButtonActive
                    ]}
                    onPress={() => setTimeRange(range)}
                  >
                    <Text style={[
                      styles.timeRangeButtonText,
                      timeRange === range && styles.timeRangeButtonTextActive
                    ]}>
                      {range === 'today' ? '‰ªäÊó•' :
                       range === 'week' ? 'Êú¨ÈÄ±' :
                       range === 'month' ? 'Êú¨Êúà' : 'Á¥ØÁ©ç'}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </View>
            {topIncomes.length > 0 ? (
              topIncomes.map((income, index) => (
                <View key={income.id} style={styles.topItem}>
                  <Text style={styles.topItemName}>{income.name}</Text>
                  <View style={styles.topItemRight}>
                    <Text style={styles.gainAmount}>
                      +{formatCurrency(income.amount)}
                    </Text>
                    <Text style={styles.typeLabel}>
                      {income.type}
                    </Text>
                  </View>
                </View>
              ))
            ) : (
              <Text style={styles.emptyText}>Êö´ÁÑ°Êî∂ÂÖ•Êï∏Êìö</Text>
            )}
          </View>

          {/* Top Expenses */}
          <View style={styles.topCard}>
            <Text style={styles.cardTitle}>ÊúÄÂ§ßÊîØÂá∫ TOP 5</Text>
            {topExpenses.length > 0 ? (
              topExpenses.map((expense, index) => (
                <View key={expense.id} style={styles.topItem}>
                  <Text style={styles.topItemName}>{expense.name}</Text>
                  <View style={styles.topItemRight}>
                    <Text style={styles.lossAmount}>
                      -{formatCurrency(expense.amount)}
                    </Text>
                    <Text style={styles.typeLabel}>
                      {expense.type}
                    </Text>
                  </View>
                </View>
              ))
            ) : (
              <Text style={styles.emptyText}>Êö´ÁÑ°ÊîØÂá∫Êï∏Êìö</Text>
            )}
          </View>
        </View>
      </ScrollView>

      {/* Á∑®ËºØÂêçÁ®±Modal */}
      <Modal
        visible={showEditNameModal}
        transparent={true}
        animationType="slide"
        onRequestClose={handleCancelEdit}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Á∑®ËºØÂêçÁ®±</Text>
              <TouchableOpacity onPress={handleCancelEdit} style={styles.modalCloseButton}>
                <Ionicons name="close" size={24} color="#666" />
              </TouchableOpacity>
            </View>

            <View style={styles.modalBody}>
              <Text style={styles.inputLabel}>È°ØÁ§∫ÂêçÁ®±</Text>
              <TextInput
                style={styles.nameInput}
                value={editingName}
                onChangeText={setEditingName}
                placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÂêçÁ®±"
                placeholderTextColor="#999"
                maxLength={20}
                autoFocus={true}
              />
              <Text style={styles.inputHint}>ÊúÄÂ§ö20ÂÄãÂ≠óÂÖÉ</Text>
            </View>

            <View style={styles.modalFooter}>
              <TouchableOpacity onPress={handleCancelEdit} style={styles.cancelButton}>
                <Text style={styles.cancelButtonText}>ÂèñÊ∂à</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={handleSaveName} style={styles.saveButton}>
                <Text style={styles.saveButtonText}>‰øùÂ≠ò</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      </Modal>

      {/* ÁôªÈåÑÊ®°ÊÖã */}
      <Modal
        visible={showLoginModal}
        transparent={true}
        animationType="slide"
        onRequestClose={handleCloseLoginModal}
      >
        <View style={styles.modalOverlay}>
          <View style={styles.loginModalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>
                {user ? 'Â∑≤ÁôªÈåÑ' : (isRegistering ? 'Ë®ªÂÜäÂ∏≥Ëôü' : 'ÁôªÈåÑÂ∏≥Ëôü')}
              </Text>
              <TouchableOpacity onPress={handleCloseLoginModal} style={styles.modalCloseButton}>
                <Ionicons name="close" size={24} color="#666" />
              </TouchableOpacity>
            </View>

            <View style={styles.modalBody}>
              {user ? (
                // Â∑≤ÁôªÈåÑÁãÄÊÖã
                <View style={styles.loggedInContainer}>
                  <Ionicons name="checkmark-circle" size={48} color="#34C759" style={styles.successIcon} />
                  <Text style={styles.loggedInText}>ÊÇ®Â∑≤ÊàêÂäüÁôªÈåÑ</Text>
                  <Text style={styles.userEmailText}>{user.email}</Text>

                  <View style={styles.autoSyncInfo}>
                    <Ionicons name="sync" size={16} color="#007AFF" />
                    <Text style={styles.autoSyncText}>Êï∏ÊìöÂ∑≤Ëá™ÂãïÂêåÊ≠•Âà∞Èõ≤Á´Ø</Text>
                  </View>

                  {/* ÁôªÂá∫ÊåâÈàïÂ∑≤ÁßªÂà∞ headerÔºåÈÄôË£°‰∏çÈúÄË¶ÅÈáçË§á */}
                </View>
              ) : (
                // Êú™ÁôªÈåÑÁãÄÊÖã
                <View>
                  {/* Google ÁôªÈåÑÊåâÈàï - Âº∑Âà∂ÂïüÁî® */}
                  <TouchableOpacity
                    onPress={handleGoogleLogin}
                    style={[styles.googleLoginButton, { opacity: 1 }]}
                    disabled={false}
                    activeOpacity={0.8}
                  >
                    <Ionicons name="logo-google" size={20} color="#fff" />
                    <Text style={styles.googleLoginText}>
                      üî• Google ÁôªÈåÑ (Â∑≤ÂïüÁî®)
                    </Text>
                  </TouchableOpacity>

                  <View style={styles.divider}>
                    <View style={styles.dividerLine} />
                    <Text style={styles.dividerText}>Êàñ</Text>
                    <View style={styles.dividerLine} />
                  </View>

                  {/* ÈõªÂ≠êÈÉµ‰ª∂ÁôªÈåÑË°®ÂñÆ */}
                  <View style={styles.formContainer}>
                    <Text style={styles.inputLabel}>ÈõªÂ≠êÈÉµ‰ª∂</Text>
                    <TextInput
                      style={styles.loginInput}
                      value={loginEmail}
                      onChangeText={setLoginEmail}
                      placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÈõªÂ≠êÈÉµ‰ª∂"
                      keyboardType="email-address"
                      autoCapitalize="none"
                      autoCorrect={false}
                    />

                    <Text style={styles.inputLabel}>ÂØÜÁ¢º</Text>
                    <TextInput
                      style={styles.loginInput}
                      value={loginPassword}
                      onChangeText={setLoginPassword}
                      placeholder={isRegistering ? "Ë´ãËº∏ÂÖ•ÂØÜÁ¢ºÔºàËá≥Â∞ë6ÂÄãÂ≠óÁ¨¶Ôºâ" : "Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑÂØÜÁ¢º"}
                      secureTextEntry
                      autoCapitalize="none"
                      autoCorrect={false}
                    />

                    {isRegistering && (
                      <>
                        <Text style={styles.inputLabel}>Á¢∫Ë™çÂØÜÁ¢º</Text>
                        <TextInput
                          style={styles.loginInput}
                          value={confirmPassword}
                          onChangeText={setConfirmPassword}
                          placeholder="Ë´ãÂÜçÊ¨°Ëº∏ÂÖ•ÂØÜÁ¢º"
                          secureTextEntry
                          autoCapitalize="none"
                          autoCorrect={false}
                        />
                      </>
                    )}

                    <TouchableOpacity
                      onPress={handleLogin}
                      style={[styles.loginButton, authLoading && styles.disabledButton]}
                      disabled={authLoading}
                    >
                      <Text style={styles.loginButtonText}>
                        {authLoading ? (isRegistering ? 'Ë®ªÂÜä‰∏≠...' : 'ÁôªÈåÑ‰∏≠...') : (isRegistering ? 'Ë®ªÂÜä' : 'ÁôªÈåÑ')}
                      </Text>
                    </TouchableOpacity>

                    <TouchableOpacity
                      onPress={() => setIsRegistering(!isRegistering)}
                      style={styles.switchModeButton}
                    >
                      <Text style={styles.switchModeText}>
                        {isRegistering ? 'Â∑≤ÊúâÂ∏≥ËôüÔºüÁ´ãÂç≥ÁôªÈåÑ' : 'Ê≤íÊúâÂ∏≥ËôüÔºüÁ´ãÂç≥Ë®ªÂÜä'}
                      </Text>
                    </TouchableOpacity>
                  </View>
                </View>
              )}
            </View>
          </View>
        </View>
      </Modal>
      </View>
    </ErrorBoundary>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8F9FA',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 24,
    paddingBottom: 20,
    backgroundColor: '#fff',
  },
  userInfo: {
    flex: 1,
  },
  greetingContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 4,
    gap: 8,
  },
  greeting: {
    fontSize: 16,
    color: '#666',
    marginRight: 8,
  },
  editNameButton: {
    padding: 4,
  },
  userName: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  loginStatusContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
    backgroundColor: '#F8F9FA',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 10,
    borderWidth: 1,
  },
  loginStatusText: {
    fontSize: 10,
    color: '#34C759',
    fontWeight: '500',
  },
  logoutStatusText: {
    fontSize: 10,
    color: '#FF9500',
    fontWeight: '500',
  },
  loggedInContainer: {
    borderColor: '#34C759',
    backgroundColor: '#F0FFF4',
  },
  loggedOutContainer: {
    borderColor: '#FF9500',
    backgroundColor: '#FFF8F0',
  },
  headerButtons: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  syncIndicator: {
    marginRight: 8,
  },
  signOutButton: {
    padding: 8,
    borderRadius: 20,
    backgroundColor: '#FFF5E6',
  },
  uploadButton: {
    padding: 8,
    borderRadius: 8,
    backgroundColor: '#F0F8FF',
    borderWidth: 1,
    borderColor: '#E5F3FF',
    alignItems: 'center',
    justifyContent: 'center',
  },
  clearDataButton: {
    padding: 10,
    borderRadius: 8,
    backgroundColor: '#FFE5E5',
    borderWidth: 2,
    borderColor: '#FF3B30',
    alignItems: 'center',
    justifyContent: 'center',
    minWidth: 40,
    minHeight: 40,
  },
  diagnoseButton: {
    padding: 8,
    borderRadius: 8,
    backgroundColor: '#F0F8FF',
    borderWidth: 1,
    borderColor: '#E5F3FF',
    alignItems: 'center',
    justifyContent: 'center',
  },

  // ÁôªÈåÑÊ©´ÂπÖÊ®£Âºè
  loginBanner: {
    backgroundColor: '#F0F8FF',
    borderBottomWidth: 1,
    borderBottomColor: '#E5F3FF',
    paddingHorizontal: 24,
    paddingVertical: 16,
  },
  loginBannerContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  loginBannerText: {
    flex: 1,
  },
  loginBannerTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#007AFF',
    marginBottom: 2,
  },
  loginBannerSubtitle: {
    fontSize: 12,
    color: '#666',
  },
  loginBannerButton: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 8,
  },
  loginBannerButtonText: {
    color: '#fff',
    fontSize: 14,
    fontWeight: '600',
  },

  content: {
    flex: 1,
    paddingHorizontal: 24,
  },
  chartCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginVertical: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 3,
  },
  cardTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  netWorthAmount: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#007AFF',
    marginBottom: 16,
  },
  negativeAmount: {
    color: '#FF3B30',
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  chartPlaceholder: {
    height: 200,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8F9FA',
    borderRadius: 16,
    marginVertical: 8,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderStyle: 'dashed',
  },
  chartPlaceholderText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
    marginBottom: 4,
  },
  chartPlaceholderSubtext: {
    fontSize: 12,
    color: '#999',
    marginBottom: 8,
  },
  chartContainer: {
    marginTop: 8,
  },
  chartDataContainer: {
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 12,
    marginTop: 8,
  },
  chartSummaryRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  chartSummaryLabel: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  chartSummaryValue: {
    fontSize: 12,
    fontWeight: '600',
  },
  positiveChange: {
    color: '#34C759',
  },
  negativeChange: {
    color: '#FF3B30',
  },
  neutralChange: {
    color: '#007AFF',
  },
  chartTrendContainer: {
    flexDirection: 'row',
    alignItems: 'flex-end',
    justifyContent: 'space-between',
    height: 40,
    marginBottom: 8,
  },
  chartBar: {
    width: 6,
    borderRadius: 3,
    minHeight: 4,
  },
  chartLabelsContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  chartLabel: {
    fontSize: 10,
    color: '#999',
  },
  chartDataSummary: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#fff',
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#e1e5e9',
  },
  chartDataText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#333',
    textAlign: 'center',
  },
  bentoGrid: {
    marginBottom: 24,
  },
  summaryRow: {
    flexDirection: 'row',
    marginBottom: 16,
    gap: 16,
  },
  summaryCard: {
    flex: 1,
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  assetsCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#34C759',
  },
  liabilitiesCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#FF3B30',
  },
  incomeCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#007AFF',
  },
  expenseCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#FF9500',
  },
  summaryLabel: {
    fontSize: 14,
    color: '#666',
    marginBottom: 4,
  },
  summaryAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  topCard: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 2,
  },
  cardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  timeRangeSelector: {
    flexDirection: 'row',
    backgroundColor: '#F8F9FA',
    borderRadius: 8,
    padding: 2,
  },
  timeRangeButton: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 6,
    marginHorizontal: 1,
  },
  timeRangeButtonActive: {
    backgroundColor: '#007AFF',
  },
  timeRangeButtonText: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  timeRangeButtonTextActive: {
    color: '#fff',
  },
  topItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  topItemName: {
    fontSize: 14,
    color: '#333',
    flex: 1,
  },
  topItemRight: {
    alignItems: 'flex-end',
  },
  gainAmount: {
    fontSize: 14,
    fontWeight: '600',
    color: '#34C759',
  },
  gainPercent: {
    fontSize: 12,
    color: '#34C759',
  },
  lossAmount: {
    fontSize: 14,
    fontWeight: '600',
    color: '#FF3B30',
  },
  lossPercent: {
    fontSize: 12,
    color: '#FF3B30',
  },
  typeLabel: {
    fontSize: 10,
    color: '#999',
    marginTop: 2,
  },
  emptyText: {
    fontSize: 14,
    color: '#999',
    textAlign: 'center',
    paddingVertical: 20,
  },
  // ModalÊ®£Âºè
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 16,
    width: '85%',
    maxWidth: 400,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 8,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#F0F0F0',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  modalCloseButton: {
    padding: 4,
  },
  modalBody: {
    padding: 20,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '500',
    color: '#333',
    marginBottom: 8,
  },
  nameInput: {
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333',
    backgroundColor: '#F8F9FA',
  },
  inputHint: {
    fontSize: 12,
    color: '#999',
    marginTop: 4,
  },
  modalFooter: {
    flexDirection: 'row',
    padding: 20,
    paddingTop: 0,
    gap: 12,
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: '#E5E5E5',
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: 16,
    color: '#666',
    fontWeight: '500',
  },
  saveButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: '#007AFF',
    alignItems: 'center',
  },
  saveButtonText: {
    fontSize: 16,
    color: '#fff',
    fontWeight: '600',
  },
  // ÁôªÈåÑÊ®°ÊÖãÊ®£Âºè
  loginModalContent: {
    backgroundColor: '#fff',
    borderRadius: 16,
    width: '90%',
    maxWidth: 450,
    maxHeight: '80%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.25,
    shadowRadius: 8,
    elevation: 8,
  },
  loggedInContainer: {
    alignItems: 'center',
    paddingVertical: 20,
  },
  successIcon: {
    marginBottom: 16,
  },
  loggedInText: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  userEmailText: {
    fontSize: 14,
    color: '#666',
    marginBottom: 20,
  },
  autoSyncInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
    backgroundColor: '#F0F8FF',
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: '#E5F3FF',
  },
  autoSyncText: {
    fontSize: 12,
    color: '#007AFF',
    fontWeight: '500',
  },
  // ÁßªÈô§ÈáçË§áÁöÑÁôªÂá∫ÊåâÈàïÊ®£ÂºèÔºå‰ΩøÁî® header ‰∏≠ÁöÑÊ®£Âºè
  googleLoginButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#4285F4',
    paddingVertical: 12,
    borderRadius: 8,
    marginBottom: 20,
    gap: 8,
  },
  googleLoginText: {
    fontSize: 16,
    color: '#fff',
    fontWeight: '500',
  },
  divider: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 20,
  },
  dividerLine: {
    flex: 1,
    height: 1,
    backgroundColor: '#E5E5E5',
  },
  dividerText: {
    fontSize: 14,
    color: '#999',
    marginHorizontal: 16,
  },
  formContainer: {
    gap: 16,
  },
  loginInput: {
    borderWidth: 1,
    borderColor: '#E5E5E5',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 12,
    fontSize: 16,
    color: '#333',
    backgroundColor: '#F8F9FA',
  },
  loginButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 8,
  },
  loginButtonText: {
    fontSize: 16,
    color: '#fff',
    fontWeight: '600',
  },
  disabledButton: {
    opacity: 0.6,
  },
  switchModeButton: {
    alignItems: 'center',
    paddingVertical: 8,
  },
  switchModeText: {
    fontSize: 14,
    color: '#007AFF',
    fontWeight: '500',
  },
});
