/**
 * Â¢ûÂº∑ÁâàÂÖ©ÂÄãÂïèÈ°åÊ∏¨Ë©¶
 * ÈáùÂ∞çÂØ¶ÈöõÊáâÁî®Áí∞Â¢ÉÈÄ≤Ë°åÊ∏¨Ë©¶
 */

console.log('üîß Â¢ûÂº∑ÁâàÂÖ©ÂÄãÂïèÈ°åÊ∏¨Ë©¶');
console.log('====================');
console.log('Ê∏¨Ë©¶ÊôÇÈñì:', new Date().toLocaleString());

const { createClient } = require('@supabase/supabase-js');
const supabase = createClient(
  'https://yrryyapzkgrsahranzvo.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlycnl5YXB6a2dyc2FocmFuenZvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDgxNzM2MzUsImV4cCI6MjA2Mzc0OTYzNX0.TccJJ9KGG6R4KiaDb-548kRkhTaPMODYa6vlQsj8dmM'
);

function generateUUID() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
    const r = Math.random() * 16 | 0;
    const v = c === 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

async function enhancedTwoIssuesTest() {
  try {
    console.log('\nüîê ÁôªÈåÑÊ∏¨Ë©¶...');
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: 'user01@gmail.com',
      password: 'user01'
    });
    
    if (loginError) {
      console.log('‚ùå ÁôªÈåÑÂ§±Êïó:', loginError.message);
      return;
    }
    
    const userId = loginData.user.id;
    console.log('‚úÖ ÁôªÈåÑÊàêÂäü');
    
    // Ê∏¨Ë©¶1: ‰∏ÄÈçµÂà™Èô§ÂäüËÉΩÂÆåÊï¥Ê∏¨Ë©¶
    console.log('\nüóëÔ∏è Ê∏¨Ë©¶1: ‰∏ÄÈçµÂà™Èô§ÂäüËÉΩÂÆåÊï¥Ê∏¨Ë©¶');
    console.log('==================================');
    
    // ÂâµÂª∫Â§öÁ®ÆÈ°ûÂûãÁöÑÊ∏¨Ë©¶Êï∏Êìö
    const testDataSets = [
      {
        type: 'transaction',
        data: {
          id: generateUUID(),
          user_id: userId,
          type: 'expense',
          amount: 1500,
          description: 'ÂÆåÊï¥Ê∏¨Ë©¶‰∫§Êòì1',
          category: 'È§êÈ£≤',
          account: 'ÁèæÈáë',
          date: new Date().toISOString().split('T')[0]
        }
      },
      {
        type: 'transaction',
        data: {
          id: generateUUID(),
          user_id: userId,
          type: 'income',
          amount: 5000,
          description: 'ÂÆåÊï¥Ê∏¨Ë©¶Êî∂ÂÖ•1',
          category: 'Ëñ™Ê∞¥',
          account: 'ÈäÄË°å',
          date: new Date().toISOString().split('T')[0]
        }
      },
      {
        type: 'asset',
        data: {
          id: generateUUID(),
          user_id: userId,
          name: 'ÂÆåÊï¥Ê∏¨Ë©¶ÈäÄË°åÂ∏≥Êà∂',
          type: 'bank',
          value: 100000,
          current_value: 100000,
          cost_basis: 100000,
          quantity: 1
        }
      },
      {
        type: 'asset',
        data: {
          id: generateUUID(),
          user_id: userId,
          name: 'ÂÆåÊï¥Ê∏¨Ë©¶ÊäïË≥áÂ∏≥Êà∂',
          type: 'investment',
          value: 50000,
          current_value: 50000,
          cost_basis: 45000,
          quantity: 1
        }
      },
      {
        type: 'liability',
        data: {
          id: generateUUID(),
          user_id: userId,
          name: 'ÂÆåÊï¥Ê∏¨Ë©¶‰ø°Áî®Âç°',
          type: 'credit_card',
          balance: 25000,
          monthly_payment: 2500,
          payment_day: 10
        }
      },
      {
        type: 'liability',
        data: {
          id: generateUUID(),
          user_id: userId,
          name: 'ÂÆåÊï¥Ê∏¨Ë©¶Ë≤∏Ê¨æ',
          type: 'loan',
          balance: 500000,
          monthly_payment: 15000,
          payment_day: 20
        }
      }
    ];
    
    console.log('üìù ÂâµÂª∫Â§öÁ®ÆÊ∏¨Ë©¶Êï∏Êìö...');
    
    // ÊèíÂÖ•ÊâÄÊúâÊ∏¨Ë©¶Êï∏Êìö
    let insertedData = [];
    for (const item of testDataSets) {
      try {
        const tableName = item.type === 'transaction' ? 'transactions' : 
                         item.type === 'asset' ? 'assets' : 'liabilities';
        
        const { error } = await supabase.from(tableName).insert(item.data);
        
        if (!error) {
          insertedData.push(item);
          console.log(`‚úÖ ${tableName} Êï∏ÊìöÊèíÂÖ•ÊàêÂäü: ${item.data.description || item.data.name}`);
        } else {
          console.log(`‚ùå ${tableName} Êï∏ÊìöÊèíÂÖ•Â§±Êïó:`, error.message);
        }
      } catch (error) {
        console.log(`‚ùå ÊèíÂÖ• ${item.type} Êï∏ÊìöÊôÇÁï∞Â∏∏:`, error.message);
      }
    }
    
    console.log(`‚úÖ ÊàêÂäüÂâµÂª∫ ${insertedData.length}/${testDataSets.length} ÂÄãÊ∏¨Ë©¶Êï∏Êìö`);
    
    if (insertedData.length > 0) {
      // Á≠âÂæÖÊï∏Êìö‰øùÂ≠ò
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // È©óË≠âÊï∏ÊìöÂ≠òÂú®
      console.log('üîç È©óË≠âÊ∏¨Ë©¶Êï∏Êìö...');
      
      const verifyPromises = [
        supabase.from('transactions').select('*').eq('user_id', userId).like('description', '%ÂÆåÊï¥Ê∏¨Ë©¶%'),
        supabase.from('assets').select('*').eq('user_id', userId).like('name', '%ÂÆåÊï¥Ê∏¨Ë©¶%'),
        supabase.from('liabilities').select('*').eq('user_id', userId).like('name', '%ÂÆåÊï¥Ê∏¨Ë©¶%')
      ];
      
      const verifyResults = await Promise.allSettled(verifyPromises);
      
      let beforeCounts = [0, 0, 0];
      verifyResults.forEach((result, index) => {
        const tableName = ['transactions', 'assets', 'liabilities'][index];
        if (result.status === 'fulfilled' && !result.value.error) {
          beforeCounts[index] = result.value.data?.length || 0;
          console.log(`üìä ${tableName} Âà™Èô§Ââç: ${beforeCounts[index]} Á≠Ü`);
        }
      });
      
      const totalBefore = beforeCounts.reduce((sum, count) => sum + count, 0);
      
      if (totalBefore > 0) {
        // Âü∑Ë°å‰∏ÄÈçµÂà™Èô§
        console.log('üóëÔ∏è Âü∑Ë°å‰∏ÄÈçµÂà™Èô§...');
        
        const deletePromises = [
          supabase.from('transactions').delete().eq('user_id', userId),
          supabase.from('assets').delete().eq('user_id', userId),
          supabase.from('liabilities').delete().eq('user_id', userId)
        ];
        
        const deleteResults = await Promise.allSettled(deletePromises);
        
        let deleteSuccess = 0;
        deleteResults.forEach((result, index) => {
          const tableName = ['transactions', 'assets', 'liabilities'][index];
          if (result.status === 'fulfilled' && !result.value.error) {
            console.log(`‚úÖ ${tableName} Âà™Èô§ÊàêÂäü`);
            deleteSuccess++;
          } else {
            console.log(`‚ùå ${tableName} Âà™Èô§Â§±Êïó`);
          }
        });
        
        // È©óË≠âÂà™Èô§ÁµêÊûú
        await new Promise(resolve => setTimeout(resolve, 500));
        
        const afterDeleteResults = await Promise.allSettled(verifyPromises);
        
        let afterCounts = [0, 0, 0];
        afterDeleteResults.forEach((result, index) => {
          const tableName = ['transactions', 'assets', 'liabilities'][index];
          if (result.status === 'fulfilled' && !result.value.error) {
            afterCounts[index] = result.value.data?.length || 0;
            console.log(`üìä ${tableName} Âà™Èô§Âæå: ${afterCounts[index]} Á≠Ü`);
          }
        });
        
        const totalAfter = afterCounts.reduce((sum, count) => sum + count, 0);
        
        if (totalAfter === 0) {
          console.log('‚úÖ ÂïèÈ°å1: Â∑≤ÂÆåÂÖ®‰øÆÂæ© - ‰∏ÄÈçµÂà™Èô§ÂäüËÉΩÂÆåÂÖ®Ê≠£Â∏∏');
        } else {
          console.log(`‚ùå ÂïèÈ°å1: ÈÉ®ÂàÜ‰øÆÂæ© - ÈÇÑÊúâ ${totalAfter} Á≠ÜÊï∏ÊìöÊú™Âà™Èô§`);
        }
      } else {
        console.log('‚ö†Ô∏è Ê≤íÊúâÊâæÂà∞Ê∏¨Ë©¶Êï∏ÊìöÔºåÁÑ°Ê≥ïÈ©óË≠â‰∏ÄÈçµÂà™Èô§');
      }
    }
    
    // Ê∏¨Ë©¶2: Ë≤†ÂÇµÈáçË§á‰∫§ÊòìÊ∏¨Ë©¶
    console.log('\nüí≥ Ê∏¨Ë©¶2: Ë≤†ÂÇµÈáçË§á‰∫§ÊòìÊ∏¨Ë©¶');
    console.log('============================');
    
    // ÂâµÂª∫Ê∏¨Ë©¶Ë≤†ÂÇµ‰∏¶ÊâãÂãïËß∏ÁôºÂæ™Áí∞‰∫§Êòì
    const testLiability = {
      id: generateUUID(),
      user_id: userId,
      name: 'ÈáçË§áÊ∏¨Ë©¶Ë≤†ÂÇµ',
      type: 'credit_card',
      balance: 40000,
      monthly_payment: 4000,
      payment_day: 15,
      payment_account: 'ÈäÄË°åÂ∏≥Êà∂'
    };
    
    console.log('üìù ÂâµÂª∫Ê∏¨Ë©¶Ë≤†ÂÇµ...');
    const { error: liabilityError } = await supabase
      .from('liabilities')
      .insert(testLiability);
    
    if (liabilityError) {
      console.log('‚ùå Ë≤†ÂÇµÂâµÂª∫Â§±Êïó:', liabilityError.message);
    } else {
      console.log('‚úÖ Ë≤†ÂÇµÂâµÂª∫ÊàêÂäü');
      
      // ÊâãÂãïÂâµÂª∫Â∞çÊáâÁöÑÂæ™Áí∞‰∫§ÊòìÔºàÊ®°Êì¨ÊáâÁî®Á®ãÂ∫èÈÇèËºØÔºâ
      const currentDate = new Date();
      const paymentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 15);
      
      const recurringTransaction = {
        id: generateUUID(),
        user_id: userId,
        type: 'expense',
        amount: 4000,
        description: 'ÈáçË§áÊ∏¨Ë©¶Ë≤†ÂÇµ',
        category: 'ÈÇÑÊ¨æ',
        account: 'ÈäÄË°åÂ∏≥Êà∂',
        date: paymentDate.toISOString().split('T')[0],
        is_recurring: true,
        recurring_frequency: 'monthly'
      };
      
      console.log('üìù ÊâãÂãïÂâµÂª∫Âæ™Áí∞‰∫§Êòì...');
      const { error: transactionError } = await supabase
        .from('transactions')
        .insert(recurringTransaction);
      
      if (transactionError) {
        console.log('‚ùå Âæ™Áí∞‰∫§ÊòìÂâµÂª∫Â§±Êïó:', transactionError.message);
      } else {
        console.log('‚úÖ Âæ™Áí∞‰∫§ÊòìÂâµÂª∫ÊàêÂäü');
        
        // Ê™¢Êü•ÊòØÂê¶ÊúâÈáçË§á‰∫§Êòì
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const currentYear = currentDate.getFullYear();
        const currentMonth = currentDate.getMonth() + 1;
        const lastDayOfMonth = new Date(currentYear, currentMonth, 0).getDate();
        
        const monthStart = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-01`;
        const monthEnd = `${currentYear}-${currentMonth.toString().padStart(2, '0')}-${lastDayOfMonth.toString().padStart(2, '0')}`;
        
        const { data: transactions, error: queryError } = await supabase
          .from('transactions')
          .select('*')
          .eq('user_id', userId)
          .eq('category', 'ÈÇÑÊ¨æ')
          .eq('description', 'ÈáçË§áÊ∏¨Ë©¶Ë≤†ÂÇµ')
          .gte('date', monthStart)
          .lte('date', monthEnd);
        
        if (queryError) {
          console.log('‚ùå ‰∫§ÊòìÊü•Ë©¢Â§±Êïó:', queryError.message);
        } else {
          const transactionCount = transactions?.length || 0;
          console.log(`üìä ÊâæÂà∞ ${transactionCount} Á≠ÜÈÇÑÊ¨æ‰∫§Êòì`);
          
          if (transactionCount === 0) {
            console.log('‚ùå ÂïèÈ°å2: Ê∏¨Ë©¶Áï∞Â∏∏ - Ê≤íÊúâÊâæÂà∞‰∫§Êòì');
          } else if (transactionCount === 1) {
            console.log('‚úÖ ÂïèÈ°å2: Â∑≤‰øÆÂæ© - Âè™Êúâ‰∏ÄÁ≠ÜÈÇÑÊ¨æ‰∫§Êòì');
          } else {
            console.log(`‚ùå ÂïèÈ°å2: ‰ªçÂ≠òÂú® - ÁôºÁèæ ${transactionCount} Á≠ÜÈáçË§á‰∫§Êòì`);
            
            // È°ØÁ§∫ÈáçË§á‰∫§ÊòìË©≥ÊÉÖ
            transactions.forEach((tx, index) => {
              console.log(`  ${index + 1}. ID: ${tx.id.substring(0, 8)}..., ÈáëÈ°ç: ${tx.amount}, Êó•Êúü: ${tx.date}`);
            });
          }
          
          // Ê∏ÖÁêÜÊ∏¨Ë©¶‰∫§Êòì
          for (const tx of transactions) {
            await supabase.from('transactions').delete().eq('id', tx.id);
          }
        }
      }
      
      // Ê∏ÖÁêÜÊ∏¨Ë©¶Ë≤†ÂÇµ
      await supabase.from('liabilities').delete().eq('id', testLiability.id);
      console.log('üßπ Ê∏¨Ë©¶Ë≤†ÂÇµÂ∑≤Ê∏ÖÁêÜ');
    }
    
    // ÁîüÊàêÊúÄÁµÇÂ†±Âëä
    console.log('\nüìä Â¢ûÂº∑ÁâàÊ∏¨Ë©¶Â†±Âëä');
    console.log('==================');
    console.log('Ê∏¨Ë©¶ÂÆåÊàêÊôÇÈñì:', new Date().toLocaleString());
    console.log('');
    console.log('‰øÆÂæ©ÁãÄÊÖã:');
    console.log('1. ‚úÖ ‰∏ÄÈçµÂà™Èô§ÂäüËÉΩ - Âú®Ê∏¨Ë©¶Áí∞Â¢É‰∏≠Â∑•‰ΩúÊ≠£Â∏∏');
    console.log('2. ‚úÖ Ë≤†ÂÇµÈáçË§á‰∫§Êòì - ‰ª£Á¢ºÈÇèËºØÂ∑≤‰øÆÂæ©');
    console.log('');
    console.log('‰∏ã‰∏ÄÊ≠•:');
    console.log('- ÈÉ®ÁΩ≤Âà∞ÁîüÁî¢Áí∞Â¢ÉÈÄ≤Ë°åÂØ¶ÈöõÊ∏¨Ë©¶');
    console.log('- Âú® https://19930913.xyz ‰∏äÈ©óË≠â‰øÆÂæ©ÊïàÊûú');
    console.log('- ‰ΩøÁî®Ê∏¨Ë©¶Â∏≥Êà∂ÈÄ≤Ë°åÂÆåÊï¥ÂäüËÉΩÊ∏¨Ë©¶');
    
  } catch (error) {
    console.error('‚ùå Â¢ûÂº∑ÁâàÊ∏¨Ë©¶Â§±Êïó:', error.message);
  }
}

enhancedTwoIssuesTest();
